{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Parser = require('./Parser');\n\nvar _Parser2 = _interopRequireDefault(_Parser);\n\nvar _FormatterMath = require('./formatters/FormatterMath');\n\nvar _FormatterMath2 = _interopRequireDefault(_FormatterMath);\n\nvar _FormatterLatex = require('./formatters/FormatterLatex');\n\nvar _FormatterLatex2 = _interopRequireDefault(_FormatterLatex);\n\nvar _logger = require('./logger');\n\nvar _greekLetters = require('./models/greek-letters');\n\nvar greekLetters = _interopRequireWildcard(_greekLetters);\n\nvar _LexerLatex = require('./lexers/LexerLatex');\n\nvar _LexerLatex2 = _interopRequireDefault(_LexerLatex);\n\nvar _LexerMath = require('./lexers/LexerMath');\n\nvar _LexerMath2 = _interopRequireDefault(_LexerMath);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * A class for parsing latex math\n */\n\n\nvar AlgebraLatex = function () {\n  /**\n   * Create an AlgebraLatex object, to be converted\n   * The latex paremeter was removed as of v2.0, use parseLatex()\n   * @param options the options to provide to the library\n   * @return {AlgebraLatex} object to be converted\n   */\n  function AlgebraLatex() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AlgebraLatex);\n\n    this.options = options;\n  }\n\n  _createClass(AlgebraLatex, [{\n    key: 'parseLatex',\n    value: function parseLatex(latex) {\n      // Replace , with . for european decimal separators\n      latex = latex.replace(/,/g, '.');\n      this.input = latex;\n      this.parser = new _Parser2.default(latex, _LexerLatex2.default, this.options);\n      this.parser.parse();\n      return this;\n    }\n  }, {\n    key: 'parseMath',\n    value: function parseMath(math) {\n      // Replace , with . for european decimal separators\n      math = math.replace(/,/g, '.');\n      this.input = math;\n      this.parser = new _Parser2.default(math, _LexerMath2.default, this.options);\n      this.parser.parse();\n      return this;\n    }\n  }, {\n    key: 'getAst',\n    value: function getAst() {\n      return this.parser.ast;\n    }\n    /**\n     * Will return a serialized string eg. 2*(3+4)/(sqrt(5))-8\n     * @return string The serialized string\n     */\n\n  }, {\n    key: 'toMath',\n    value: function toMath() {\n      return new _FormatterMath2.default(this.getAst()).format();\n    }\n    /**\n     * Will return a formatted latex string eg. \\frac{1}{\\sqrt{2}}\n     * @return string The formatted latex string\n     */\n\n  }, {\n    key: 'toLatex',\n    value: function toLatex() {\n      return new _FormatterLatex2.default(this.getAst()).format();\n    }\n    /**\n     * @deprecated toLatex() should be used instead\n     */\n\n  }, {\n    key: 'toTex',\n    value: function toTex() {\n      return self.toLatex();\n    }\n    /**\n     * Will return an algebra.js Expression or Equation\n     * @param {Object} algebraJS an instance of algebra.js\n     * @return {(Expression|Equation)} an Expression or Equation\n     */\n\n  }, {\n    key: 'toAlgebra',\n    value: function toAlgebra(algebraJS) {\n      if (algebraJS === null) {\n        throw new Error('Algebra.js must be passed as a parameter for toAlgebra');\n      }\n\n      var mathToParse = this.toMath();\n      mathToParse = greekLetters.convertSymbols(mathToParse);\n      return algebraJS.parse(mathToParse);\n    }\n    /**\n     * Will return an algebrite object\n     * @param {Object} algebrite an instance of algebrite\n     * @return {Object} an algebrite object\n     */\n\n  }, {\n    key: 'toAlgebrite',\n    value: function toAlgebrite(algebrite) {\n      if (algebrite === null) {\n        return new Error('Algebrite must be passed as a parameter for toAlgebrite');\n      }\n\n      if (this.isEquation()) {\n        return new Error('Algebrite can not handle equations, only expressions');\n      }\n\n      var mathToParse = this.toMath();\n      mathToParse = greekLetters.convertSymbols(mathToParse);\n      return algebrite.eval(mathToParse);\n    }\n    /**\n     * Will return a coffequate object\n     * @return {Object} a coffeequate object\n     */\n\n  }, {\n    key: 'toCoffeequate',\n    value: function toCoffeequate(coffeequate) {\n      if (coffeequate === null) {\n        return new Error('Coffeequante must be passed as a parameter for toCoffeequante');\n      }\n\n      var result = this.toMath();\n      result = result.replace(/\\^/g, '**');\n      return coffeequate(result);\n    }\n    /**\n     * Wether or not the object is an equation or an expression\n     * @return Boolean true if expression\n     */\n\n  }, {\n    key: 'isEquation',\n    value: function isEquation() {\n      return this.input.includes('=');\n    }\n  }]);\n\n  return AlgebraLatex;\n}();\n\nmodule.exports = AlgebraLatex;","map":{"version":3,"sources":["C:/Users/karwi/OneDrive/เดสก์ท็อป/numer/Numer-main/node_modules/algebra-latex/lib/index.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_Parser","require","_Parser2","_interopRequireDefault","_FormatterMath","_FormatterMath2","_FormatterLatex","_FormatterLatex2","_logger","_greekLetters","greekLetters","_interopRequireWildcard","_LexerLatex","_LexerLatex2","_LexerMath","_LexerMath2","obj","__esModule","newObj","hasOwnProperty","call","default","_classCallCheck","instance","TypeError","AlgebraLatex","options","arguments","undefined","value","parseLatex","latex","replace","input","parser","parse","parseMath","math","getAst","ast","toMath","format","toLatex","toTex","self","toAlgebra","algebraJS","Error","mathToParse","convertSymbols","toAlgebrite","algebrite","isEquation","eval","toCoffeequate","coffeequate","result","includes","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Parser = require('./Parser');\n\nvar _Parser2 = _interopRequireDefault(_Parser);\n\nvar _FormatterMath = require('./formatters/FormatterMath');\n\nvar _FormatterMath2 = _interopRequireDefault(_FormatterMath);\n\nvar _FormatterLatex = require('./formatters/FormatterLatex');\n\nvar _FormatterLatex2 = _interopRequireDefault(_FormatterLatex);\n\nvar _logger = require('./logger');\n\nvar _greekLetters = require('./models/greek-letters');\n\nvar greekLetters = _interopRequireWildcard(_greekLetters);\n\nvar _LexerLatex = require('./lexers/LexerLatex');\n\nvar _LexerLatex2 = _interopRequireDefault(_LexerLatex);\n\nvar _LexerMath = require('./lexers/LexerMath');\n\nvar _LexerMath2 = _interopRequireDefault(_LexerMath);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A class for parsing latex math\n */\nvar AlgebraLatex = function () {\n  /**\n   * Create an AlgebraLatex object, to be converted\n   * The latex paremeter was removed as of v2.0, use parseLatex()\n   * @param options the options to provide to the library\n   * @return {AlgebraLatex} object to be converted\n   */\n  function AlgebraLatex() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AlgebraLatex);\n\n    this.options = options;\n  }\n\n  _createClass(AlgebraLatex, [{\n    key: 'parseLatex',\n    value: function parseLatex(latex) {\n      // Replace , with . for european decimal separators\n      latex = latex.replace(/,/g, '.');\n\n      this.input = latex;\n      this.parser = new _Parser2.default(latex, _LexerLatex2.default, this.options);\n      this.parser.parse();\n\n      return this;\n    }\n  }, {\n    key: 'parseMath',\n    value: function parseMath(math) {\n      // Replace , with . for european decimal separators\n      math = math.replace(/,/g, '.');\n\n      this.input = math;\n      this.parser = new _Parser2.default(math, _LexerMath2.default, this.options);\n      this.parser.parse();\n\n      return this;\n    }\n  }, {\n    key: 'getAst',\n    value: function getAst() {\n      return this.parser.ast;\n    }\n\n    /**\n     * Will return a serialized string eg. 2*(3+4)/(sqrt(5))-8\n     * @return string The serialized string\n     */\n\n  }, {\n    key: 'toMath',\n    value: function toMath() {\n      return new _FormatterMath2.default(this.getAst()).format();\n    }\n\n    /**\n     * Will return a formatted latex string eg. \\frac{1}{\\sqrt{2}}\n     * @return string The formatted latex string\n     */\n\n  }, {\n    key: 'toLatex',\n    value: function toLatex() {\n      return new _FormatterLatex2.default(this.getAst()).format();\n    }\n\n    /**\n     * @deprecated toLatex() should be used instead\n     */\n\n  }, {\n    key: 'toTex',\n    value: function toTex() {\n      return self.toLatex();\n    }\n\n    /**\n     * Will return an algebra.js Expression or Equation\n     * @param {Object} algebraJS an instance of algebra.js\n     * @return {(Expression|Equation)} an Expression or Equation\n     */\n\n  }, {\n    key: 'toAlgebra',\n    value: function toAlgebra(algebraJS) {\n      if (algebraJS === null) {\n        throw new Error('Algebra.js must be passed as a parameter for toAlgebra');\n      }\n\n      var mathToParse = this.toMath();\n      mathToParse = greekLetters.convertSymbols(mathToParse);\n\n      return algebraJS.parse(mathToParse);\n    }\n\n    /**\n     * Will return an algebrite object\n     * @param {Object} algebrite an instance of algebrite\n     * @return {Object} an algebrite object\n     */\n\n  }, {\n    key: 'toAlgebrite',\n    value: function toAlgebrite(algebrite) {\n      if (algebrite === null) {\n        return new Error('Algebrite must be passed as a parameter for toAlgebrite');\n      }\n\n      if (this.isEquation()) {\n        return new Error('Algebrite can not handle equations, only expressions');\n      }\n\n      var mathToParse = this.toMath();\n      mathToParse = greekLetters.convertSymbols(mathToParse);\n\n      return algebrite.eval(mathToParse);\n    }\n\n    /**\n     * Will return a coffequate object\n     * @return {Object} a coffeequate object\n     */\n\n  }, {\n    key: 'toCoffeequate',\n    value: function toCoffeequate(coffeequate) {\n      if (coffeequate === null) {\n        return new Error('Coffeequante must be passed as a parameter for toCoffeequante');\n      }\n\n      var result = this.toMath();\n      result = result.replace(/\\^/g, '**');\n\n      return coffeequate(result);\n    }\n\n    /**\n     * Wether or not the object is an equation or an expression\n     * @return Boolean true if expression\n     */\n\n  }, {\n    key: 'isEquation',\n    value: function isEquation() {\n      return this.input.includes('=');\n    }\n  }]);\n\n  return AlgebraLatex;\n}();\n\nmodule.exports = AlgebraLatex;"]},"metadata":{},"sourceType":"script"}