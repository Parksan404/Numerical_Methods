{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Lexer2 = require('./Lexer');\n\nvar _Lexer3 = _interopRequireDefault(_Lexer2);\n\nvar _functions = require('../models/functions');\n\nvar _functions2 = _interopRequireDefault(_functions);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar LatexLexer = function (_Lexer) {\n  _inherits(LatexLexer, _Lexer);\n\n  function LatexLexer(mathString) {\n    _classCallCheck(this, LatexLexer);\n\n    return _possibleConstructorReturn(this, (LatexLexer.__proto__ || Object.getPrototypeOf(LatexLexer)).call(this, mathString));\n  }\n\n  _createClass(LatexLexer, [{\n    key: 'next_token',\n    value: function next_token() {\n      this.prev_col = this.col;\n      this.prev_line = this.line;\n\n      if (this.pos >= this.text.length) {\n        return {\n          type: 'EOF'\n        };\n      }\n\n      if (this.current_char() == '\\n') {\n        this.col = 0;\n        this.line++;\n      }\n\n      var blank_chars = [' ', '\\n'];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = blank_chars[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var blank = _step.value;\n\n          if (this.text.startsWith(blank, this.pos)) {\n            this.increment(blank.length);\n            return this.next_token();\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (this.current_char().match(/[0-9]/)) {\n        return this.number();\n      }\n\n      if (this.current_char().match(/[a-zA-Z]/)) {\n        return this.alphabetic();\n      }\n\n      if (this.current_char() == '(') {\n        this.increment();\n        return {\n          type: 'bracket',\n          open: true,\n          value: '('\n        };\n      }\n\n      if (this.current_char() == ')') {\n        this.increment();\n        return {\n          type: 'bracket',\n          open: false,\n          value: ')'\n        };\n      }\n\n      if (this.current_char() == '+') {\n        this.increment();\n        return {\n          type: 'operator',\n          value: 'plus'\n        };\n      }\n\n      if (this.current_char() == '-') {\n        this.increment();\n        return {\n          type: 'operator',\n          value: 'minus'\n        };\n      }\n\n      if (this.current_char() == '*') {\n        this.increment();\n        return {\n          type: 'operator',\n          value: 'multiply'\n        };\n      }\n\n      if (this.current_char() == '/') {\n        this.increment();\n        return {\n          type: 'operator',\n          value: 'divide'\n        };\n      }\n\n      if (this.current_char() == '^') {\n        this.increment();\n        return {\n          type: 'operator',\n          value: 'exponent'\n        };\n      }\n\n      if (this.current_char() == '=') {\n        this.increment();\n        return {\n          type: 'equal'\n        };\n      }\n\n      if (this.current_char() == '_') {\n        this.increment();\n        return {\n          type: 'underscore'\n        };\n      }\n\n      this.error('Unknown symbol: ' + this.current_char());\n    } // Token contains string of alphabetic characters\n\n  }, {\n    key: 'alphabetic',\n    value: function alphabetic() {\n      var token = '';\n\n      while (this.current_char().match(/[a-zA-Z]/) && this.pos <= this.text.length) {\n        token += this.current_char();\n        this.increment();\n      }\n\n      if (_functions2.default.includes(token)) {\n        return {\n          type: 'keyword',\n          value: token\n        };\n      }\n\n      return {\n        type: 'variable',\n        value: token\n      };\n    }\n  }]);\n\n  return LatexLexer;\n}(_Lexer3.default);\n\nexports.default = LatexLexer;","map":{"version":3,"sources":["C:/Users/karwi/OneDrive/เดสก์ท็อป/numer/Numer-main/node_modules/algebra-latex/lib/lexers/LexerMath.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_Lexer2","require","_Lexer3","_interopRequireDefault","_functions","_functions2","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","LatexLexer","_Lexer","mathString","getPrototypeOf","next_token","prev_col","col","prev_line","line","pos","text","type","current_char","blank_chars","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","blank","startsWith","increment","err","return","match","number","alphabetic","open","error","token","includes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Lexer2 = require('./Lexer');\n\nvar _Lexer3 = _interopRequireDefault(_Lexer2);\n\nvar _functions = require('../models/functions');\n\nvar _functions2 = _interopRequireDefault(_functions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LatexLexer = function (_Lexer) {\n  _inherits(LatexLexer, _Lexer);\n\n  function LatexLexer(mathString) {\n    _classCallCheck(this, LatexLexer);\n\n    return _possibleConstructorReturn(this, (LatexLexer.__proto__ || Object.getPrototypeOf(LatexLexer)).call(this, mathString));\n  }\n\n  _createClass(LatexLexer, [{\n    key: 'next_token',\n    value: function next_token() {\n      this.prev_col = this.col;\n      this.prev_line = this.line;\n\n      if (this.pos >= this.text.length) {\n        return { type: 'EOF' };\n      }\n\n      if (this.current_char() == '\\n') {\n        this.col = 0;\n        this.line++;\n      }\n\n      var blank_chars = [' ', '\\n'];\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = blank_chars[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var blank = _step.value;\n\n          if (this.text.startsWith(blank, this.pos)) {\n            this.increment(blank.length);\n            return this.next_token();\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (this.current_char().match(/[0-9]/)) {\n        return this.number();\n      }\n\n      if (this.current_char().match(/[a-zA-Z]/)) {\n        return this.alphabetic();\n      }\n\n      if (this.current_char() == '(') {\n        this.increment();\n        return { type: 'bracket', open: true, value: '(' };\n      }\n\n      if (this.current_char() == ')') {\n        this.increment();\n        return { type: 'bracket', open: false, value: ')' };\n      }\n\n      if (this.current_char() == '+') {\n        this.increment();\n        return { type: 'operator', value: 'plus' };\n      }\n\n      if (this.current_char() == '-') {\n        this.increment();\n        return { type: 'operator', value: 'minus' };\n      }\n\n      if (this.current_char() == '*') {\n        this.increment();\n        return { type: 'operator', value: 'multiply' };\n      }\n\n      if (this.current_char() == '/') {\n        this.increment();\n        return { type: 'operator', value: 'divide' };\n      }\n\n      if (this.current_char() == '^') {\n        this.increment();\n        return { type: 'operator', value: 'exponent' };\n      }\n\n      if (this.current_char() == '=') {\n        this.increment();\n        return { type: 'equal' };\n      }\n\n      if (this.current_char() == '_') {\n        this.increment();\n        return { type: 'underscore' };\n      }\n\n      this.error('Unknown symbol: ' + this.current_char());\n    }\n\n    // Token contains string of alphabetic characters\n\n  }, {\n    key: 'alphabetic',\n    value: function alphabetic() {\n      var token = '';\n      while (this.current_char().match(/[a-zA-Z]/) && this.pos <= this.text.length) {\n        token += this.current_char();\n        this.increment();\n      }\n\n      if (_functions2.default.includes(token)) {\n        return {\n          type: 'keyword',\n          value: token\n        };\n      }\n\n      return {\n        type: 'variable',\n        value: token\n      };\n    }\n  }]);\n\n  return LatexLexer;\n}(_Lexer3.default);\n\nexports.default = LatexLexer;"]},"metadata":{},"sourceType":"script"}