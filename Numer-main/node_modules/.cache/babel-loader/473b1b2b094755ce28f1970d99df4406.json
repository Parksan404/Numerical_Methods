{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * An abstract class shared between lexers\n */\n\n\nvar Lexer = function () {\n  function Lexer(text) {\n    _classCallCheck(this, Lexer);\n\n    this.text = text;\n    this.pos = 0;\n    this.col = 0;\n    this.line = 0;\n    this.prev_col = 0;\n    this.prev_line = 0;\n  }\n\n  _createClass(Lexer, [{\n    key: 'increment',\n    value: function increment() {\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.pos += amount;\n      this.col += amount;\n    }\n  }, {\n    key: 'error',\n    value: function error(message) {\n      var line = this.text.split('\\n')[this.prev_line];\n      var spacing = '';\n\n      for (var i = 0; i < this.prev_col; i++) {\n        spacing += ' ';\n      }\n\n      throw Error('Lexer error\\n' + line + '\\n' + spacing + '^\\nError at line: ' + (this.prev_line + 1) + ' col: ' + (this.prev_col + 1) + '\\n' + message);\n    }\n  }, {\n    key: 'current_char',\n    value: function current_char() {\n      return this.text.charAt(this.pos);\n    }\n  }, {\n    key: 'eat',\n    value: function eat(char) {\n      if (this.current_char() == char) {\n        this.pos += 1;\n      } else {\n        this.error('Expected ' + char + ' found ' + this.current_char());\n      }\n    }\n  }, {\n    key: 'number',\n    value: function number() {\n      var num = '';\n      var separator = false;\n\n      while (this.current_char().match(/[0-9\\.]/)) {\n        if (this.current_char() == '.') {\n          if (separator) {\n            break;\n          } else {\n            separator = true;\n          }\n        }\n\n        num += this.current_char();\n        this.increment();\n      }\n\n      var result = Number(num);\n\n      if (isNaN(result)) {\n        this.error('Could not parse number: \\'' + num + '\\'');\n      }\n\n      return {\n        type: 'number',\n        value: result\n      };\n    }\n  }]);\n\n  return Lexer;\n}();\n\nexports.default = Lexer;","map":{"version":3,"sources":["C:/Users/karwi/OneDrive/เดสก์ท็อป/numer/Numer-main/node_modules/algebra-latex/lib/lexers/Lexer.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","Lexer","text","pos","col","line","prev_col","prev_line","increment","amount","arguments","undefined","error","message","split","spacing","Error","current_char","charAt","eat","char","number","num","separator","match","result","Number","isNaN","type","default"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * An abstract class shared between lexers\n */\nvar Lexer = function () {\n  function Lexer(text) {\n    _classCallCheck(this, Lexer);\n\n    this.text = text;\n    this.pos = 0;\n\n    this.col = 0;\n    this.line = 0;\n    this.prev_col = 0;\n    this.prev_line = 0;\n  }\n\n  _createClass(Lexer, [{\n    key: 'increment',\n    value: function increment() {\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n      this.pos += amount;\n      this.col += amount;\n    }\n  }, {\n    key: 'error',\n    value: function error(message) {\n      var line = this.text.split('\\n')[this.prev_line];\n      var spacing = '';\n\n      for (var i = 0; i < this.prev_col; i++) {\n        spacing += ' ';\n      }\n\n      throw Error('Lexer error\\n' + line + '\\n' + spacing + '^\\nError at line: ' + (this.prev_line + 1) + ' col: ' + (this.prev_col + 1) + '\\n' + message);\n    }\n  }, {\n    key: 'current_char',\n    value: function current_char() {\n      return this.text.charAt(this.pos);\n    }\n  }, {\n    key: 'eat',\n    value: function eat(char) {\n      if (this.current_char() == char) {\n        this.pos += 1;\n      } else {\n        this.error('Expected ' + char + ' found ' + this.current_char());\n      }\n    }\n  }, {\n    key: 'number',\n    value: function number() {\n      var num = '';\n      var separator = false;\n\n      while (this.current_char().match(/[0-9\\.]/)) {\n        if (this.current_char() == '.') {\n          if (separator) {\n            break;\n          } else {\n            separator = true;\n          }\n        }\n\n        num += this.current_char();\n        this.increment();\n      }\n\n      var result = Number(num);\n      if (isNaN(result)) {\n        this.error('Could not parse number: \\'' + num + '\\'');\n      }\n\n      return {\n        type: 'number',\n        value: result\n      };\n    }\n  }]);\n\n  return Lexer;\n}();\n\nexports.default = Lexer;"]},"metadata":{},"sourceType":"script"}