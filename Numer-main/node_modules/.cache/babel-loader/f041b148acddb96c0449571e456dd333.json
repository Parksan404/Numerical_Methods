{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Lexer = require('./lexers/Lexer');\n\nvar _Lexer2 = _interopRequireDefault(_Lexer);\n\nvar _functions = require('./models/functions');\n\nvar _functions2 = _interopRequireDefault(_functions);\n\nvar _greekLetters = require('./models/greek-letters');\n\nvar _greekLetters2 = _interopRequireDefault(_greekLetters);\n\nvar _logger = require('./logger');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ParserLatex = function () {\n  function ParserLatex(latex, Lexer) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ParserLatex); // if (!(Lexer instanceof LexerClass)) {\n    //   throw Error('Please parse a valid lexer as second argument')\n    // }\n\n\n    this.lexer = new Lexer(latex);\n    this.options = options;\n    this.ast = null;\n    this.current_token = null;\n    this.peek_token = null;\n    this.functions = _functions2.default.concat(options.functions || []);\n  }\n\n  _createClass(ParserLatex, [{\n    key: 'parse',\n    value: function parse() {\n      (0, _logger.debug)('\\nLatex parser .parse()');\n      this.ast = this.equation();\n      this.eat('EOF');\n      return this.ast;\n    }\n  }, {\n    key: 'next_token',\n    value: function next_token() {\n      if (this.peek_token != null) {\n        this.current_token = this.peek_token;\n        this.peek_token = null;\n        (0, _logger.debug)('next token from peek', this.current_token);\n      } else {\n        this.current_token = this.lexer.next_token();\n        (0, _logger.debug)('next token', this.current_token);\n      }\n\n      return this.current_token;\n    }\n  }, {\n    key: 'peek',\n    value: function peek() {\n      if (this.peek_token == null) {\n        this.peek_token = this.lexer.next_token();\n      }\n\n      (0, _logger.debug)('next token from peek', this.peek_token);\n      return this.peek_token;\n    }\n  }, {\n    key: 'error',\n    value: function error(message) {\n      var line = this.lexer.text.split('\\n')[this.lexer.line];\n      var spacing = '';\n\n      for (var i = 0; i < this.lexer.col; i++) {\n        spacing += ' ';\n      }\n\n      throw Error('Parser error\\n' + line + '\\n' + spacing + '^\\nError at line: ' + (this.lexer.line + 1) + ' col: ' + (this.lexer.col + 1) + '\\n' + message);\n    }\n  }, {\n    key: 'eat',\n    value: function eat(token_type) {\n      if (this.next_token().type != token_type) {\n        this.error('Expected ' + token_type + ' found ' + JSON.stringify(this.current_token));\n      }\n    }\n  }, {\n    key: 'equation',\n    value: function equation() {\n      // equation : expr ( EQUAL expr )?\n      var lhs = this.expr();\n\n      if (this.peek().type != 'equal') {\n        return lhs;\n      } else {\n        this.next_token();\n      }\n\n      var rhs = this.expr();\n      return {\n        type: 'equation',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'expr',\n    value: function expr() {\n      // expr : operator\n      (0, _logger.debug)('expr');\n      this.peek();\n\n      if (this.peek_token.type == 'number' || this.peek_token.type == 'operator' || this.peek_token.type == 'variable' || this.peek_token.type == 'function' || this.peek_token.type == 'keyword' || this.peek_token.type == 'bracket') {\n        return this.operator();\n      }\n\n      if (this.peek_token.type == 'bracket' && this.peek_token.open == false) {\n        return null;\n      }\n\n      if (this.peek_token.type == 'EOF') {\n        this.next_token();\n        return null;\n      }\n\n      this.next_token();\n      this.error('Unexpected token: ' + JSON.stringify(this.current_token));\n    }\n  }, {\n    key: 'keyword',\n    value: function keyword() {\n      // keyword : KEYWORD\n      //         | fraction\n      //         | function\n      (0, _logger.debug)('keyword');\n\n      if (this.peek().type != 'keyword') {\n        throw Error('Expected keyword found ' + JSON.stringify(this.peek_token));\n      }\n\n      var kwd = this.peek_token.value;\n      kwd = kwd.toLowerCase();\n      (0, _logger.debug)('keyword -', kwd);\n\n      if (kwd == 'frac') {\n        return this.fraction();\n      }\n\n      if (kwd == 'sqrt') {\n        return this.sqrt();\n      }\n\n      if (this.functions.includes(kwd.toLowerCase())) {\n        return this.function();\n      }\n\n      this.eat('keyword');\n      return {\n        type: 'keyword',\n        value: this.current_token.value\n      };\n    }\n  }, {\n    key: 'sqrt',\n    value: function sqrt() {\n      // sqrt : SQRT (L_SQUARE_BRAC NUMBER R_SQUARE_BRAC)? GROUP\n      (0, _logger.debug)('sqrt');\n      this.eat('keyword');\n\n      if (this.current_token.value != 'sqrt') {\n        this.error('Expected sqrt found ' + JSON.stringify(this.current_token));\n      }\n\n      if (this.peek().value != '[') {\n        var content = this.group();\n        return {\n          type: 'function',\n          value: 'sqrt',\n          content: content\n        };\n      }\n\n      this.eat('bracket');\n\n      if (this.current_token.value != '[') {\n        this.error('Expected \"[\" bracket, found ' + JSON.stringify(this.current_token));\n      }\n\n      var base = this.number();\n      this.eat('bracket');\n\n      if (this.current_token.value != ']') {\n        this.error('Expected \"]\" bracket, found ' + JSON.stringify(this.current_token));\n      }\n\n      var value = this.group();\n      return {\n        type: 'operator',\n        operator: 'exponent',\n        lhs: value,\n        rhs: {\n          type: 'operator',\n          operator: 'divide',\n          lhs: {\n            type: 'number',\n            value: 1\n          },\n          rhs: base\n        }\n      };\n    }\n  }, {\n    key: 'fraction',\n    value: function fraction() {\n      // fraction : FRAC group group\n      (0, _logger.debug)('fraction');\n      this.eat('keyword');\n\n      if (this.current_token.value != 'frac') {\n        this.error('Expected fraction found ' + JSON.stringify(this.current_token));\n      }\n\n      var nominator = this.group();\n      var denominator = this.group();\n      return {\n        type: 'operator',\n        operator: 'divide',\n        lhs: nominator,\n        rhs: denominator\n      };\n    }\n  }, {\n    key: 'function',\n    value: function _function() {\n      // function : FUNCTION ( group | number )\n      (0, _logger.debug)('function');\n      this.eat('keyword');\n      var value = this.current_token.value;\n      var content = void 0;\n\n      if (this.peek().type == 'bracket') {\n        content = this.group();\n      } else {\n        content = this.number();\n      }\n\n      return {\n        type: 'function',\n        value: value,\n        content: content\n      };\n    }\n  }, {\n    key: 'group',\n    value: function group() {\n      // group : LBRACKET expr RBRACKET\n      (0, _logger.debug)('start group');\n      this.eat('bracket');\n\n      if (this.current_token.open != true) {\n        this.error('Expected opening bracket found ' + this.current_token);\n      }\n\n      var content = this.expr();\n      this.eat('bracket');\n\n      if (this.current_token.open != false) {\n        this.error('Expected closing bracket found ' + this.current_token);\n      }\n\n      (0, _logger.debug)('end group');\n      return content;\n    }\n  }, {\n    key: 'operator',\n    value: function operator() {\n      // operator : operator_term ((PLUS | MINUS) operator)?\n      (0, _logger.debug)('operator left');\n      var lhs = this.operator_multiply();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'plus' && op.value != 'minus') {\n        (0, _logger.debug)('operator only left side');\n        return lhs;\n      } // Operator token\n\n\n      this.next_token();\n      (0, _logger.debug)('operator right');\n      var rhs = this.operator();\n      return {\n        type: 'operator',\n        operator: op.value,\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_multiply',\n    value: function operator_multiply() {\n      // operator_multiply : (operator_divide | GROUP) ( (MULTIPLY operator_multiply) | number )?\n      (0, _logger.debug)('op mul left');\n      var lhs = this.operator_divide();\n      var op = this.peek();\n\n      if (op.type == 'number' || op.type == 'variable' || op.type == 'keyword' || op.type == 'bracket' && op.value == '(') {\n        op = {\n          type: 'operator',\n          value: 'multiply'\n        };\n      } else if (op.type != 'operator' || op.value != 'multiply' && op.value != 'divide') {\n        (0, _logger.debug)('term only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('op mul right');\n      var rhs = this.operator_multiply();\n      return {\n        type: 'operator',\n        operator: op.value,\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_divide',\n    value: function operator_divide() {\n      // operator_divide : operator_mod operator_divide_prime\n      (0, _logger.debug)('operator_divide');\n      var lhs = this.operator_mod();\n      var divideResult = this.operator_divide_prime(lhs);\n      return divideResult;\n    }\n  }, {\n    key: 'operator_divide_prime',\n    value: function operator_divide_prime(lhs) {\n      // operator_divide_prime : epsilon | DIVIDE operator_mod operator_divide_prime\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'divide') {\n        (0, _logger.debug)('operator_divide_prime - epsilon');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('operator_divide_prime - next operator');\n      var rhs = this.operator_mod();\n      return this.operator_divide_prime({\n        type: 'operator',\n        operator: 'divide',\n        lhs: lhs,\n        rhs: rhs\n      });\n    }\n  }, {\n    key: 'operator_mod',\n    value: function operator_mod() {\n      // operator_mod : operator_exp ( MODULUS operator_mod )?\n      (0, _logger.debug)('modulus left');\n      var lhs = this.operator_exp();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'modulus') {\n        (0, _logger.debug)('modulus only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('modulus right');\n      var rhs = this.operator_mod();\n      return {\n        type: 'operator',\n        operator: 'modulus',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_exp',\n    value: function operator_exp() {\n      // operator_exp : subscript ( EXPONENT operator_exp )?\n      var lhs = this.subscript();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'exponent') {\n        (0, _logger.debug)('modulus only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      var rhs = this.operator_exp();\n      return {\n        type: 'operator',\n        operator: 'exponent',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'variable',\n    value: function variable() {\n      this.eat('variable');\n      return {\n        type: 'variable',\n        value: this.current_token.value\n      };\n    }\n  }, {\n    key: 'subscript',\n    value: function subscript() {\n      // subscript : number ( SUBSCRIPT subscript )?\n      var base_num = this.number();\n\n      if (this.peek().type == 'underscore') {\n        this.eat('underscore');\n        var sub_value = this.subscript();\n        return {\n          type: 'subscript',\n          base: base_num,\n          subscript: sub_value\n        };\n      }\n\n      return base_num;\n    }\n  }, {\n    key: 'number',\n    value: function number() {\n      // number : NUMBER\n      //        | uni_operator\n      //        | variable\n      //        | keyword\n      //        | symbol\n      //        | group\n      (0, _logger.debug)('number');\n      this.peek();\n\n      if (this.peek_token.type == 'number') {\n        this.next_token();\n        return {\n          type: this.current_token.type,\n          value: this.current_token.value\n        };\n      }\n\n      if (this.peek_token.type == 'operator') {\n        return this.uni_operator();\n      }\n\n      if (this.peek_token.type == 'variable') {\n        return this.variable();\n      }\n\n      if (this.peek_token.type == 'keyword') {\n        return this.keyword();\n      }\n\n      if (this.peek_token.type == 'bracket') {\n        return this.group();\n      }\n\n      this.next_token();\n      this.error('Expected number, variable, function, group, or + - found ' + JSON.stringify(this.current_token));\n    }\n  }, {\n    key: 'uni_operator',\n    value: function uni_operator() {\n      this.eat('operator');\n\n      if (this.current_token.value == 'plus' || this.current_token.value == 'minus') {\n        var prefix = this.current_token.value;\n        var value = this.number();\n\n        if (value.type == 'number') {\n          return {\n            type: 'number',\n            value: prefix == 'minus' ? -value.value : value.value\n          };\n        }\n\n        return {\n          type: 'uni-operator',\n          operator: prefix,\n          value: value\n        };\n      }\n    }\n  }]);\n\n  return ParserLatex;\n}();\n\nexports.default = ParserLatex;","map":{"version":3,"sources":["C:/Users/karwi/OneDrive/เดสก์ท็อป/numer/Numer-main/node_modules/algebra-latex/lib/Parser.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_Lexer","require","_Lexer2","_interopRequireDefault","_functions","_functions2","_greekLetters","_greekLetters2","_logger","obj","__esModule","default","_classCallCheck","instance","TypeError","ParserLatex","latex","Lexer","options","arguments","undefined","lexer","ast","current_token","peek_token","functions","concat","parse","debug","equation","eat","next_token","peek","error","message","line","text","split","spacing","col","Error","token_type","type","JSON","stringify","lhs","expr","rhs","operator","open","keyword","kwd","toLowerCase","fraction","sqrt","includes","function","content","group","base","number","nominator","denominator","_function","operator_multiply","op","operator_divide","operator_mod","divideResult","operator_divide_prime","operator_exp","subscript","variable","base_num","sub_value","uni_operator","prefix"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Lexer = require('./lexers/Lexer');\n\nvar _Lexer2 = _interopRequireDefault(_Lexer);\n\nvar _functions = require('./models/functions');\n\nvar _functions2 = _interopRequireDefault(_functions);\n\nvar _greekLetters = require('./models/greek-letters');\n\nvar _greekLetters2 = _interopRequireDefault(_greekLetters);\n\nvar _logger = require('./logger');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ParserLatex = function () {\n  function ParserLatex(latex, Lexer) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ParserLatex);\n\n    // if (!(Lexer instanceof LexerClass)) {\n    //   throw Error('Please parse a valid lexer as second argument')\n    // }\n\n    this.lexer = new Lexer(latex);\n    this.options = options;\n    this.ast = null;\n    this.current_token = null;\n    this.peek_token = null;\n    this.functions = _functions2.default.concat(options.functions || []);\n  }\n\n  _createClass(ParserLatex, [{\n    key: 'parse',\n    value: function parse() {\n      (0, _logger.debug)('\\nLatex parser .parse()');\n      this.ast = this.equation();\n\n      this.eat('EOF');\n\n      return this.ast;\n    }\n  }, {\n    key: 'next_token',\n    value: function next_token() {\n      if (this.peek_token != null) {\n        this.current_token = this.peek_token;\n        this.peek_token = null;\n        (0, _logger.debug)('next token from peek', this.current_token);\n      } else {\n        this.current_token = this.lexer.next_token();\n        (0, _logger.debug)('next token', this.current_token);\n      }\n      return this.current_token;\n    }\n  }, {\n    key: 'peek',\n    value: function peek() {\n      if (this.peek_token == null) {\n        this.peek_token = this.lexer.next_token();\n      }\n\n      (0, _logger.debug)('next token from peek', this.peek_token);\n      return this.peek_token;\n    }\n  }, {\n    key: 'error',\n    value: function error(message) {\n      var line = this.lexer.text.split('\\n')[this.lexer.line];\n      var spacing = '';\n\n      for (var i = 0; i < this.lexer.col; i++) {\n        spacing += ' ';\n      }\n\n      throw Error('Parser error\\n' + line + '\\n' + spacing + '^\\nError at line: ' + (this.lexer.line + 1) + ' col: ' + (this.lexer.col + 1) + '\\n' + message);\n    }\n  }, {\n    key: 'eat',\n    value: function eat(token_type) {\n      if (this.next_token().type != token_type) {\n        this.error('Expected ' + token_type + ' found ' + JSON.stringify(this.current_token));\n      }\n    }\n  }, {\n    key: 'equation',\n    value: function equation() {\n      // equation : expr ( EQUAL expr )?\n      var lhs = this.expr();\n\n      if (this.peek().type != 'equal') {\n        return lhs;\n      } else {\n        this.next_token();\n      }\n\n      var rhs = this.expr();\n\n      return {\n        type: 'equation',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'expr',\n    value: function expr() {\n      // expr : operator\n\n      (0, _logger.debug)('expr');\n\n      this.peek();\n\n      if (this.peek_token.type == 'number' || this.peek_token.type == 'operator' || this.peek_token.type == 'variable' || this.peek_token.type == 'function' || this.peek_token.type == 'keyword' || this.peek_token.type == 'bracket') {\n        return this.operator();\n      }\n\n      if (this.peek_token.type == 'bracket' && this.peek_token.open == false) {\n        return null;\n      }\n\n      if (this.peek_token.type == 'EOF') {\n        this.next_token();\n        return null;\n      }\n\n      this.next_token();\n      this.error('Unexpected token: ' + JSON.stringify(this.current_token));\n    }\n  }, {\n    key: 'keyword',\n    value: function keyword() {\n      // keyword : KEYWORD\n      //         | fraction\n      //         | function\n\n      (0, _logger.debug)('keyword');\n\n      if (this.peek().type != 'keyword') {\n        throw Error('Expected keyword found ' + JSON.stringify(this.peek_token));\n      }\n\n      var kwd = this.peek_token.value;\n      kwd = kwd.toLowerCase();\n\n      (0, _logger.debug)('keyword -', kwd);\n\n      if (kwd == 'frac') {\n        return this.fraction();\n      }\n\n      if (kwd == 'sqrt') {\n        return this.sqrt();\n      }\n\n      if (this.functions.includes(kwd.toLowerCase())) {\n        return this.function();\n      }\n\n      this.eat('keyword');\n      return {\n        type: 'keyword',\n        value: this.current_token.value\n      };\n    }\n  }, {\n    key: 'sqrt',\n    value: function sqrt() {\n      // sqrt : SQRT (L_SQUARE_BRAC NUMBER R_SQUARE_BRAC)? GROUP\n      (0, _logger.debug)('sqrt');\n\n      this.eat('keyword');\n\n      if (this.current_token.value != 'sqrt') {\n        this.error('Expected sqrt found ' + JSON.stringify(this.current_token));\n      }\n\n      if (this.peek().value != '[') {\n        var content = this.group();\n\n        return {\n          type: 'function',\n          value: 'sqrt',\n          content: content\n        };\n      }\n\n      this.eat('bracket');\n      if (this.current_token.value != '[') {\n        this.error('Expected \"[\" bracket, found ' + JSON.stringify(this.current_token));\n      }\n\n      var base = this.number();\n\n      this.eat('bracket');\n      if (this.current_token.value != ']') {\n        this.error('Expected \"]\" bracket, found ' + JSON.stringify(this.current_token));\n      }\n\n      var value = this.group();\n\n      return {\n        type: 'operator',\n        operator: 'exponent',\n        lhs: value,\n        rhs: {\n          type: 'operator',\n          operator: 'divide',\n          lhs: {\n            type: 'number',\n            value: 1\n          },\n          rhs: base\n        }\n      };\n    }\n  }, {\n    key: 'fraction',\n    value: function fraction() {\n      // fraction : FRAC group group\n\n      (0, _logger.debug)('fraction');\n\n      this.eat('keyword');\n\n      if (this.current_token.value != 'frac') {\n        this.error('Expected fraction found ' + JSON.stringify(this.current_token));\n      }\n\n      var nominator = this.group();\n      var denominator = this.group();\n\n      return {\n        type: 'operator',\n        operator: 'divide',\n        lhs: nominator,\n        rhs: denominator\n      };\n    }\n  }, {\n    key: 'function',\n    value: function _function() {\n      // function : FUNCTION ( group | number )\n\n      (0, _logger.debug)('function');\n\n      this.eat('keyword');\n      var value = this.current_token.value;\n\n      var content = void 0;\n      if (this.peek().type == 'bracket') {\n        content = this.group();\n      } else {\n        content = this.number();\n      }\n\n      return {\n        type: 'function',\n        value: value,\n        content: content\n      };\n    }\n  }, {\n    key: 'group',\n    value: function group() {\n      // group : LBRACKET expr RBRACKET\n\n      (0, _logger.debug)('start group');\n\n      this.eat('bracket');\n      if (this.current_token.open != true) {\n        this.error('Expected opening bracket found ' + this.current_token);\n      }\n\n      var content = this.expr();\n\n      this.eat('bracket');\n      if (this.current_token.open != false) {\n        this.error('Expected closing bracket found ' + this.current_token);\n      }\n\n      (0, _logger.debug)('end group');\n\n      return content;\n    }\n  }, {\n    key: 'operator',\n    value: function operator() {\n      // operator : operator_term ((PLUS | MINUS) operator)?\n      (0, _logger.debug)('operator left');\n      var lhs = this.operator_multiply();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'plus' && op.value != 'minus') {\n        (0, _logger.debug)('operator only left side');\n        return lhs;\n      }\n\n      // Operator token\n      this.next_token();\n\n      (0, _logger.debug)('operator right');\n      var rhs = this.operator();\n\n      return {\n        type: 'operator',\n        operator: op.value,\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_multiply',\n    value: function operator_multiply() {\n      // operator_multiply : (operator_divide | GROUP) ( (MULTIPLY operator_multiply) | number )?\n\n      (0, _logger.debug)('op mul left');\n\n      var lhs = this.operator_divide();\n\n      var op = this.peek();\n\n      if (op.type == 'number' || op.type == 'variable' || op.type == 'keyword' || op.type == 'bracket' && op.value == '(') {\n        op = {\n          type: 'operator',\n          value: 'multiply'\n        };\n      } else if (op.type != 'operator' || op.value != 'multiply' && op.value != 'divide') {\n        (0, _logger.debug)('term only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('op mul right');\n\n      var rhs = this.operator_multiply();\n\n      return {\n        type: 'operator',\n        operator: op.value,\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_divide',\n    value: function operator_divide() {\n      // operator_divide : operator_mod operator_divide_prime\n\n      (0, _logger.debug)('operator_divide');\n\n      var lhs = this.operator_mod();\n\n      var divideResult = this.operator_divide_prime(lhs);\n\n      return divideResult;\n    }\n  }, {\n    key: 'operator_divide_prime',\n    value: function operator_divide_prime(lhs) {\n      // operator_divide_prime : epsilon | DIVIDE operator_mod operator_divide_prime\n\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'divide') {\n        (0, _logger.debug)('operator_divide_prime - epsilon');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('operator_divide_prime - next operator');\n\n      var rhs = this.operator_mod();\n\n      return this.operator_divide_prime({\n        type: 'operator',\n        operator: 'divide',\n        lhs: lhs,\n        rhs: rhs\n      });\n    }\n  }, {\n    key: 'operator_mod',\n    value: function operator_mod() {\n      // operator_mod : operator_exp ( MODULUS operator_mod )?\n\n      (0, _logger.debug)('modulus left');\n\n      var lhs = this.operator_exp();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'modulus') {\n        (0, _logger.debug)('modulus only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('modulus right');\n\n      var rhs = this.operator_mod();\n\n      return {\n        type: 'operator',\n        operator: 'modulus',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_exp',\n    value: function operator_exp() {\n      // operator_exp : subscript ( EXPONENT operator_exp )?\n\n      var lhs = this.subscript();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'exponent') {\n        (0, _logger.debug)('modulus only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      var rhs = this.operator_exp();\n\n      return {\n        type: 'operator',\n        operator: 'exponent',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'variable',\n    value: function variable() {\n      this.eat('variable');\n\n      return {\n        type: 'variable',\n        value: this.current_token.value\n      };\n    }\n  }, {\n    key: 'subscript',\n    value: function subscript() {\n      // subscript : number ( SUBSCRIPT subscript )?\n      var base_num = this.number();\n\n      if (this.peek().type == 'underscore') {\n        this.eat('underscore');\n\n        var sub_value = this.subscript();\n\n        return {\n          type: 'subscript',\n          base: base_num,\n          subscript: sub_value\n        };\n      }\n\n      return base_num;\n    }\n  }, {\n    key: 'number',\n    value: function number() {\n      // number : NUMBER\n      //        | uni_operator\n      //        | variable\n      //        | keyword\n      //        | symbol\n      //        | group\n\n      (0, _logger.debug)('number');\n\n      this.peek();\n\n      if (this.peek_token.type == 'number') {\n        this.next_token();\n        return {\n          type: this.current_token.type,\n          value: this.current_token.value\n        };\n      }\n\n      if (this.peek_token.type == 'operator') {\n        return this.uni_operator();\n      }\n\n      if (this.peek_token.type == 'variable') {\n        return this.variable();\n      }\n\n      if (this.peek_token.type == 'keyword') {\n        return this.keyword();\n      }\n\n      if (this.peek_token.type == 'bracket') {\n        return this.group();\n      }\n\n      this.next_token();\n      this.error('Expected number, variable, function, group, or + - found ' + JSON.stringify(this.current_token));\n    }\n  }, {\n    key: 'uni_operator',\n    value: function uni_operator() {\n      this.eat('operator');\n      if (this.current_token.value == 'plus' || this.current_token.value == 'minus') {\n        var prefix = this.current_token.value;\n        var value = this.number();\n\n        if (value.type == 'number') {\n          return {\n            type: 'number',\n            value: prefix == 'minus' ? -value.value : value.value\n          };\n        }\n\n        return {\n          type: 'uni-operator',\n          operator: prefix,\n          value: value\n        };\n      }\n    }\n  }]);\n\n  return ParserLatex;\n}();\n\nexports.default = ParserLatex;"]},"metadata":{},"sourceType":"script"}