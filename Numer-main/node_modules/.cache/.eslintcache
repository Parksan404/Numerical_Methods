[{"C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\index.js":"1","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\reportWebVitals.js":"2","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\App.js":"3","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Root of Equation\\False_position.js":"4","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Root of Equation\\Secant.js":"5","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Root of Equation\\Newton_raphson.js":"6","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Root of Equation\\Onepoint.js":"7","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\LU.js":"8","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Root of Equation\\Bisection.js":"9","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Gauss_eliminate.js":"10","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Crammer.js":"11","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Conjugate_Gradient.js":"12","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Interpolation\\Newton.js":"13","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Gauss_Jordan.js":"14","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Jacobi.js":"15","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Gauss_seidel.js":"16","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Interpolation\\Lagrange.js":"17","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Interpolation\\Spline.js":"18","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Regression\\Linear.js":"19","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Regression\\MultipleLinear.js":"20","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Regression\\Polynomial.js":"21","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\components\\Graph.js":"22"},{"size":500,"mtime":1621153421000,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1621153421000,"results":"25","hashOfConfig":"24"},{"size":11309,"mtime":1621153421000,"results":"26","hashOfConfig":"24"},{"size":10285,"mtime":1653554848151,"results":"27","hashOfConfig":"24"},{"size":8461,"mtime":1653576601326,"results":"28","hashOfConfig":"24"},{"size":7314,"mtime":1653576740186,"results":"29","hashOfConfig":"24"},{"size":7285,"mtime":1653576612888,"results":"30","hashOfConfig":"24"},{"size":8372,"mtime":1653583878430,"results":"31","hashOfConfig":"24"},{"size":10274,"mtime":1653554861399,"results":"32","hashOfConfig":"24"},{"size":9154,"mtime":1653583595524,"results":"33","hashOfConfig":"24"},{"size":8849,"mtime":1653580672467,"results":"34","hashOfConfig":"24"},{"size":11774,"mtime":1653583517112,"results":"35","hashOfConfig":"24"},{"size":11926,"mtime":1653583387710,"results":"36","hashOfConfig":"24"},{"size":9346,"mtime":1653583648473,"results":"37","hashOfConfig":"24"},{"size":11862,"mtime":1653583804909,"results":"38","hashOfConfig":"24"},{"size":11761,"mtime":1653583745702,"results":"39","hashOfConfig":"24"},{"size":11684,"mtime":1653583270849,"results":"40","hashOfConfig":"24"},{"size":11297,"mtime":1653577737748,"results":"41","hashOfConfig":"24"},{"size":9118,"mtime":1653581861947,"results":"42","hashOfConfig":"24"},{"size":11437,"mtime":1653581621591,"results":"43","hashOfConfig":"24"},{"size":8959,"mtime":1653581402707,"results":"44","hashOfConfig":"24"},{"size":1458,"mtime":1621153421000,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lu4qxd",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\index.js",[],"C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\reportWebVitals.js",[],"C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\App.js",[],"C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Root of Equation\\False_position.js",["108","109","110"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nconst columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n    {\n        title: 'XL',\n        dataIndex: 'xl',\n        key: 'xl',\n    },\n    {\n        title: 'XR',\n        dataIndex: 'xr',\n        key: 'xr',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n    {\n        title: 'Error',\n        key: 'error',\n        dataIndex: 'error',\n    },\n]\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.fn = this.fn.bind(this)\n        this.state = { ans: [], Funtion: '', XL: null, XR: null }\n        this.elt = {}\n        this.calculator = {}\n    }\n\n    //API\n    async Ex() {\n        const url = 'http://localhost:8000/data/Falseposition'\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Funtion: data.fx,\n            XL: data.xL,\n            XR: data.xR,\n        })\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n        console.log(this.state.Funtion)\n        console.log(this)\n        this.elt = document.getElementById('calculator')\n        this.calculator = Desmos.GraphingCalculator(this.elt, {\n            expressions: false,\n            backgroundColor: '#F4F6F7',\n            textColor: '#C70039',\n        })\n        this.calculator.setExpression({\n            id: 'graph1',\n            latex: this.state.Funtion,\n        })\n        this.calculator.setExpression({\n            id: 'line1',\n            latex: 'x=' + this.state.XL,\n            lineStyle: Desmos.Styles.DASHED,\n        })\n        this.calculator.setExpression({\n            id: 'line2',\n            latex: 'x=' + this.state.XR,\n            lineStyle: Desmos.Styles.DASHED,\n        })\n        // this.bi();\n        document.getElementsByClassName(\n            'dcg-graphpaper-branding'\n        )[0].style.display = 'none'\n    }\n    componentDidUpdate() {\n        this.calculator.destroy()\n        this.elt = document.getElementById('calculator')\n        this.calculator = Desmos.GraphingCalculator(this.elt, {\n            expressions: false,\n            backgroundColor: '#F4F6F7',\n            textColor: '#C70039',\n        })\n        this.calculator.setExpression({\n            id: 'line3',\n            latex: this.state.XL + '<=x<=' + this.state.XR,\n            lineStyle: Desmos.Styles.DASHED,\n            color: this.calculator.colors.ORANGE,\n        })\n        this.calculator.setExpression({\n            id: 'graph1',\n            latex: this.state.Funtion,\n        })\n        this.calculator.setExpression({\n            id: 'line1',\n            latex: 'x=' + this.state.XL,\n            lineStyle: Desmos.Styles.DASHED,\n        })\n        this.calculator.setExpression({\n            id: 'line2',\n            latex: 'x=' + this.state.XR,\n            lineStyle: Desmos.Styles.DASHED,\n        })\n        console.log(this.calculator)\n        document.getElementsByClassName(\n            'dcg-graphpaper-branding'\n        )[0].style.display = 'none'\n    }\n\n    fn(x) {\n        return math.evaluate(this.state.Funtion, { x: x })\n    }\n\n    bi() {\n        var fn = this.fn\n        console.log(fn)\n        var data = []\n        data['xl'] = []\n        data['xr'] = []\n        data['x'] = []\n        data['error'] = []\n\n        var xl = Number(this.state.XL)\n        var xr = Number(this.state.XR)\n        var xmn,\n            xmo,\n            eps = 0.00001,\n            time = 0\n        var ans = []\n\n        // xmn = (xl + xr) / 2;\n        xmn = (xl * fn(xr) - xr * fn(xl)) / (fn(xr) - fn(xl))\n        if (fn(xmn) * fn(xr) > 0) {\n            xr = xmn\n        } else if (fn(xmn) * fn(xr) < 0) {\n            xl = xmn\n        } else {\n            console.log('Iteration No. = ' + time)\n            console.log('Root of equation is ' + xmn.toFixed(6))\n            ans.push(xmn.toFixed(6))\n            data['xl'][time] = xl\n            data['xr'][time] = xr\n            data['x'][time] = xmn.toFixed(6)\n            data['error'][time] = Math.abs(err).toFixed(6)\n            this.createTable(data['xl'], data['xr'], data['x'], data['error'])\n            this.forceUpdate()\n            return\n        }\n        data['xl'][0] = xl\n        data['xr'][0] = xr\n        data['x'][0] = xmn.toFixed(6)\n        data['error'][0] = Math.abs(err).toFixed(6)\n        while (true) {\n            if (time + 1 > 1000) {\n                break\n            }\n            time++\n            xmo = xmn\n            xmn = (xl + xr) / 2\n            if (fn(xmn) * fn(xr) > 0) {\n                xr = xmn\n            } else if (fn(xmn) * fn(xr) < 0) {\n                xl = xmn\n            } else {\n                // console.log(\"Root of equation is \" + xmn);\n                break\n            }\n            var err = Math.abs((xmn - xmo) / xmn)\n            if (err <= eps) {\n                break\n            }\n            data['xl'][time] = xl\n            data['xr'][time] = xr\n            data['x'][time] = xmn.toFixed(6)\n            data['error'][time] = Math.abs(err).toFixed(6)\n\n            console.log('Iteration No. = ' + time)\n            console.log('Root of equation is ' + xmn.toFixed(6))\n            ans.push(xmn.toFixed(6))\n        }\n        console.log('Iteration No. = ' + time)\n        console.log('Root of equation is ' + xmn.toFixed(6))\n        ans.push(xmn.toFixed(6))\n\n        data['xl'][time] = xl\n        data['xr'][time] = xr\n        data['x'][time] = xmn.toFixed(6)\n        data['error'][time] = Math.abs(err).toFixed(6)\n\n        this.createTable(data['xl'], data['xr'], data['x'], data['error'])\n        this.setState({ ans: ans })\n        // console.log(fn(2));\n    }\n\n    createTable(xl, xr, x, error) {\n        dataInTable = []\n        for (var i = 0; i < xl.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                xl: xl[i],\n                xr: xr[i],\n                x: x[i],\n                error: error[i],\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>False position</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Funtion</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ Funtion: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.Funtion}\n                                name=\"Funtion\"\n                                placeholder=\"Funtion\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <p>XL</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ XL: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.XL}\n                                name=\"XL\"\n                                placeholder=\"XL\"\n                            />\n                            <p>XR</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ XR: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.XR}\n                                name=\"XR\"\n                                placeholder=\"XR\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi}>Submit</Button>\n                            <Button\n                                style={{\n                                    marginLeft: '10%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        <div\n                            id=\"calculator\"\n                            style={{\n                                width: '600px',\n                                height: '400px',\n                            }}\n                        ></div>\n                    </div>\n                </div>\n                <br></br>\n                <br></br>\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 7 }}\n                        columns={columns}\n                        dataSource={dataInTable}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Root of Equation\\Secant.js",["111","112","113","114"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nimport { compile, derivative } from 'mathjs'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nconst columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n    {\n        title: 'Y',\n        dataIndex: 'y',\n        key: 'y',\n    },\n    {\n        title: 'Error',\n        key: 'error',\n        dataIndex: 'error',\n    },\n]\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.fn = this.fn.bind(this)\n        this.state = { ans: [], Funtion: '', X0: null, X1: null }\n        this.elt = {}\n        this.calculator = {}\n    }\n\n    async Ex() {\n        const url = 'http://localhost:8000/data/Secant'\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Funtion:data.fx,\n            X0: data.x0,\n            X1: data.x1,\n        })\n        console.log(this.state.X0)\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n        console.log(this.state.Funtion)\n        console.log(this)\n        this.elt = document.getElementById('calculator')\n        this.calculator = Desmos.GraphingCalculator(this.elt, {\n            expressions: false,\n            backgroundColor: '#F4F6F7',\n            textColor: '#C70039',\n        })\n        this.calculator.setExpression({\n            id: 'graph1',\n            latex: this.state.Funtion,\n        })\n        // this.bi();\n        document.getElementsByClassName(\n            'dcg-graphpaper-branding'\n        )[0].style.display = 'none'\n    }\n    componentDidUpdate() {\n        this.calculator.destroy()\n        this.elt = document.getElementById('calculator')\n        this.calculator = Desmos.GraphingCalculator(this.elt, {\n            expressions: false,\n            backgroundColor: '#F4F6F7',\n            textColor: '#C70039',\n        })\n        this.calculator.setExpression({\n            id: 'graph1',\n            latex: this.state.Funtion,\n        })\n        // this.calculator.setExpression({\n        //   id: \"line1\",\n        //   latex: \"x=\" + this.state.X0,\n        //   lineStyle: Desmos.Styles.DASHED,\n        // });\n\n        console.log(this.calculator)\n        document.getElementsByClassName(\n            'dcg-graphpaper-branding'\n        )[0].style.display = 'none'\n    }\n\n    fn(x) {\n        return math.evaluate(this.state.Funtion, { x: x })\n    }\n\n    error(xnew, xold) {\n        return Math.abs((xnew - xold) / xnew)\n    }\n\n    func(Funtion, x) {\n        //console.log(this)\n        //const algebraObj = new AlgebraLatex().parseLatex(Funtion).toMath()\n        // console.log(math.evaluate(algebraObj, { x: x }))\n        return math.evaluate(Funtion, { x: x })\n    }\n\n    bi() {\n        var x0 = Number(this.state.X0)\n        var x1 = Number(this.state.X1)\n        var func = this.func\n        var error = this.error\n        var x = [],\n            y = 0,\n            epsilon = parseFloat(0.0)\n        var n = 1,\n            i = 1\n        var data = []\n        data['y'] = []\n        data['error'] = []\n        x.push(x0)\n        x.push(x1)\n        data['y'][0] = x0\n        data['error'][0] = '---'\n\n        do {\n            y =\n                x[i] -\n                (func(this.state.Funtion, x[i]) * (x[i] - x[i - 1])) /\n                    (func(this.state.Funtion, x[i]) -\n                        func(this.state.Funtion, x[i - 1]))\n            x.push(y)\n            epsilon = error(y, x[i])\n            data['y'][n] = y.toFixed(8)\n            data['error'][n] = Math.abs(epsilon).toFixed(8)\n            n++\n            i++\n            if (n >= 1000) {\n                break\n            }\n        } while (Math.abs(epsilon) > 0.000001)\n        this.createTable(data['y'], data['error'])\n    }\n\n    createTable(y, error) {\n        dataInTable = []\n        for (var i = 0; i < y.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                y: y[i],\n                error: error[i],\n            })\n        }\n        this.forceUpdate()\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Secant</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Funtion</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ Funtion: e.target.value })\n                                    this.forceUpdate()\n                                    // console.log(this.state.Funtion);\n                                }}\n                                value={this.state.Funtion}\n                                name=\"Funtion\"\n                                placeholder=\"Funtion\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ X0: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.X0}\n                                name=\"X0\"\n                                placeholder=\"X0\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ X1: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.X1}\n                                name=\"X1\"\n                                placeholder=\"X1\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '70%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        <div\n                            id=\"calculator\"\n                            style={{\n                                width: '600px',\n                                height: '400px',\n                            }}\n                        ></div>\n                    </div>\n                </div>\n                <br></br>\n                <br></br>\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns}\n                        dataSource={dataInTable}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Root of Equation\\Newton_raphson.js",["115","116","117","118","119","120"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nimport { log, string } from 'mathjs'\nimport { compile, derivative } from \"mathjs\";\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nconst columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n    {\n        title: 'Error',\n        key: 'error',\n        dataIndex: 'error',\n    },\n]\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.fn = this.fn.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.func = this.func.bind(this)\n        this.funcDiff = this.funcDiff.bind(this)\n        this.state = { ans: [], Funtion: '', X0: null }\n        this.elt = {}\n        this.calculator = {}\n    }\n\n    //API\n    async Ex() {\n        const url = 'http://localhost:8000/data/Nr'\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Funtion: data.fx,\n            X0: data.x0,\n        })\n        console.log(this.state.X0)\n    }\n\n    componentDidMount() {\n        this.elt = document.getElementById('calculator')\n        this.calculator = Desmos.GraphingCalculator(this.elt, {\n            expressions: false,\n            backgroundColor: '#F4F6F7',\n            textColor: '#C70039',\n        })\n        this.calculator.setExpression({\n            id: 'graph1',\n            latex: this.state.Funtion,\n        })\n        document.getElementsByClassName(\n            'dcg-graphpaper-branding'\n        )[0].style.display = 'none'\n    }\n    componentDidUpdate() {\n        this.calculator.destroy()\n        this.elt = document.getElementById('calculator')\n        this.calculator = Desmos.GraphingCalculator(this.elt, {\n            expressions: false,\n            backgroundColor: '#F4F6F7',\n            textColor: '#C70039',\n        })\n        this.calculator.setExpression({\n            id: 'graph1',\n            latex: this.state.Funtion,\n        })\n        document.getElementsByClassName(\n            'dcg-graphpaper-branding'\n        )[0].style.display = 'none'\n    }\n\n    fn(x) {\n        return math.evaluate(this.state.Funtion, { x: x })\n    }\n\n    error(xnew, xold) {\n        return Math.abs((xnew - xold) / xnew)\n    }\n    func(Funtion, x) {\n        return math.evaluate(Funtion, { x: x })\n    }\n\n    funcDiff(fx, X) {\n        var expr = math.derivative(fx, 'x')\n        let scope = { x: parseFloat(X) }\n        return expr.evaluate(scope)\n    }\n\n    bi() {\n        var error = this.error\n        var xnew = 0\n        var epsilon = parseFloat(0.0)\n        var n = 0\n        var xold = Number(this.state.X0)\n        var data = []\n        data['x'] = []\n        data['error'] = []\n\n        do {\n            xnew =\n                xold -\n                this.func(this.state.Funtion, xold) /\n                this.funcDiff(this.state.Funtion, xold)\n            epsilon = error(xnew, xold)\n            data['x'][n] = xnew.toFixed(8)\n            data['error'][n] = Math.abs(epsilon).toFixed(8)\n            n++\n            xold = xnew\n            if (n >= 1000) {\n                break\n            }\n        } while (Math.abs(epsilon) > 0.000001)\n\n        this.createTable(data['x'], data['error'])\n    }\n\n    createTable(x, error) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                x: x[i],\n                error: error[i],\n            })\n        }\n        this.forceUpdate()\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Newton raphson</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Funtion</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ Funtion: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.Funtion}\n                                name=\"Funtion\"\n                                placeholder=\"Funtion\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ X0: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.X0}\n                                name=\"X0\"\n                                placeholder=\"X0\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '73%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        <div\n                            id=\"calculator\"\n                            style={{\n                                width: '600px',\n                                height: '400px',\n                            }}\n                        ></div>\n                    </div>\n                </div>\n                <br></br>\n                <br></br>\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns}\n                        dataSource={dataInTable}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Root of Equation\\Onepoint.js",["121","122"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nconst math = require('mathjs')\nconst AlgebraLatex = require('algebra-latex')\n\naddStyles()\n\nvar dataInTable = []\nconst columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n    {\n        title: 'Error',\n        key: 'error',\n        dataIndex: 'error',\n    },\n]\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.fn = this.fn.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.state = { ans: [], Funtion: '', X0: null }\n        this.elt = {}\n        this.calculator = {}\n    }\n\n    async Ex() {\n        const url = 'http://localhost:8000/data/Onepoint'\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data.x0)\n        this.setState({\n            Funtion: data.fx,\n            X0: data.x0,\n        })\n        console.log(this.state.X0)\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n        console.log(this.state.Funtion)\n        console.log(this)\n        this.elt = document.getElementById('calculator')\n        this.calculator = Desmos.GraphingCalculator(this.elt, {\n            expressions: false,\n            backgroundColor: '#F4F6F7',\n            textColor: '#C70039',\n        })\n        this.calculator.setExpression({\n            id: 'graph1',\n            latex: this.state.Funtion,\n        })\n        document.getElementsByClassName(\n            'dcg-graphpaper-branding'\n        )[0].style.display = 'none'\n    }\n\n    componentDidUpdate() {\n        this.calculator.destroy()\n        this.elt = document.getElementById('calculator')\n        this.calculator = Desmos.GraphingCalculator(this.elt, {\n            expressions: false,\n            backgroundColor: '#F4F6F7',\n            textColor: '#C70039',\n        })\n        this.calculator.setExpression({\n            id: 'graph1',\n            latex: this.state.Funtion,\n        })\n        console.log(this.calculator)\n        document.getElementsByClassName(\n            'dcg-graphpaper-branding'\n        )[0].style.display = 'none'\n    }\n\n    fn(x) {\n        return math.evaluate(this.state.Funtion, { x: x })\n    }\n\n    func(Funtion, x) {\n        // console.log(this);\n        return math.evaluate(Funtion, { x: x })\n        // console.log(math.evaluate(algebraObj, { x: x }));\n    }\n\n    error(xnew, xold) {\n        return Math.abs((xnew - xold) / xnew)\n    }\n\n    bi() {\n        var func = this.func\n        var error = this.error\n        var xnew = 0\n        var epsilon = parseFloat(0.0)\n        var n = 0\n        var xold = Number(this.state.X0)\n        var data = []\n        data['x'] = []\n        data['error'] = []\n\n        do {\n            xnew = func(this.state.Funtion, xold)\n            epsilon = error(xnew, xold)\n            data['x'][n] = xnew.toFixed(8)\n            data['error'][n] = Math.abs(epsilon).toFixed(8)\n            n++\n            xold = xnew\n            if (n >= 1000) {\n                break\n            }\n        } while (Math.abs(epsilon) > 0.000001)\n\n        this.createTable(data['x'], data['error'])\n    }\n\n    createTable(x, error) {\n        dataInTable = []\n        console.log('X length = ' + x.length)\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                x: x[i],\n                error: error[i],\n            })\n        }\n        console.log(dataInTable)\n        this.forceUpdate()\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>One Point Iteration</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Funtion</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ Funtion: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.Funtion}\n                                name=\"Funtion\"\n                                placeholder=\"Funtion\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ X0: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.X0}\n                                name=\"X0\"\n                                placeholder=\"X0\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '73%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        <div\n                            id=\"calculator\"\n                            style={{\n                                width: '600px',\n                                height: '400px',\n                            }}\n                        ></div>\n                    </div>\n                </div>\n                <br></br>\n                <br></br>\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns}\n                        dataSource={dataInTable}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\LU.js",["123","124","125","126","127"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nimport { lusolve, format } from 'mathjs'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nconst columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n]\n\nvar A = [],\n    B = [],\n    answer = [],\n    matrixA = [],\n    matrixB = []\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.createTable = this.createTable.bind(this)\n        this.initMatrix = this.initMatrix.bind(this)\n        this.state = { Dimension: null, chDi: false }\n    }\n    //API\n    async Ex() {\n        // const url = \"https://api.randomuser.me/\";\n        const url = 'http://localhost:8000/data/lu'\n        // const url = \"http://127.0.0.1/Json/item.json\";\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Dimension: data.col,\n        })\n        this.createMatrix(this.state.Dimension, this.state.Dimension)\n\n        for (var i = 0; i < this.state.Dimension; i++) {\n            for (var j = 0; j < this.state.Dimension; j++) {\n                document.getElementById('a' + (i + 1) + '' + (j + 1)).value =\n                    data.A[i][j]\n                document.getElementById('b' + (i + 1)).value = data.B[i][0]\n            }\n        }\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n    }\n\n    initMatrix() {\n        for (var i = 0; i < this.state.Dimension; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.Dimension; j++) {\n                A[i][j] = parseFloat(\n                    document.getElementById('a' + (i + 1) + '' + (j + 1)).value\n                )\n            }\n            B.push(parseFloat(document.getElementById('b' + (i + 1)).value))\n        }\n        console.log('initMatrix')\n    }\n\n    cal() {\n        var n = this.state.Dimension\n        console.log(A)\n        console.log(B)\n        this.initMatrix()\n        var decompose = lusolve(A, B)\n        var ans = []\n        for (var i = 0; i < this.state.Dimension; i++) {\n            ans.push(math.round(decompose[i]))\n        }\n        this.createTable(ans)\n    }\n\n    bi() {\n        this.cal()\n        // this.createTable(data[\"x\"]);\n        console.log('submit')\n    }\n\n    createTable(x) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: 'X' + i,\n                x: x[i],\n            })\n        }\n        this.forceUpdate()\n    }\n\n    createMatrix(row, column) {\n        matrixA = []\n        matrixB = []\n        console.log(row + ' ' + column)\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(\n                    <Input\n                        style={{\n                            width: '15%',\n                            height: '50%',\n                            backgroundColor: 'black',\n                            marginInlineEnd: '5%',\n                            marginBlockEnd: '5%',\n                            color: 'white',\n                            fontSize: '18px',\n                            fontWeight: 'bold',\n                        }}\n                        id={'a' + i + '' + j}\n                        key={'a' + i + '' + j}\n                        placeholder={'a' + i + '' + j}\n                    />\n                )\n            }\n            matrixA.push(<br />)\n            matrixB.push(\n                <Input\n                    style={{\n                        width: '15%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'b' + i}\n                    key={'b' + i}\n                    placeholder={'b' + i}\n                />\n            )\n            matrixB.push(<br />)\n        }\n        this.setState({ chDi: true })\n        console.log(matrixA)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>LU Decomposition</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Dimension</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        Dimension: e.target.value,\n                                    })\n                                    this.createMatrix(\n                                        this.state.Dimension,\n                                        this.state.Dimension\n                                    )\n                                    this.forceUpdate()\n                                    //   console.log(this.state.Dimension);\n                                }}\n                                value={this.state.Dimension}\n                                name=\"Dimension\"\n                                placeholder=\"Dimension\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '50%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div\n                                style={{\n                                    textAlign: 'right',\n                                }}\n                            >\n                                <h2>Input Matrix A</h2>\n                                {matrixA}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div>\n                                <h2>Input Matrix B</h2>\n                                {matrixB}\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <br></br>\n                <br></br>\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns}\n                        dataSource={dataInTable}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Root of Equation\\Bisection.js",["128","129","130"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nconst math = require(\"mathjs\")\naddStyles()\n\nvar dataInTable = []\nconst columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n    {\n        title: 'XL',\n        dataIndex: 'xl',\n        key: 'xl',\n    },\n    {\n        title: 'XR',\n        dataIndex: 'xr',\n        key: 'xr',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n    {\n        title: 'Error',\n        key: 'error',\n        dataIndex: 'error',\n    },\n]\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.fn = this.fn.bind(this)\n        this.state = { ans: [], Funtion: '', XL: null, XR: null }\n        this.elt = {}\n        this.calculator = {}\n    }\n\n    //API\n    async Ex() {\n        const url = 'http://localhost:8000/data/Bisection'\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Funtion: data.fx,\n            XL: data.xL,\n            XR: data.xR,\n        })\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n        console.log(this.state.Funtion)\n        console.log(this)\n        this.elt = document.getElementById('calculator')\n        this.calculator = Desmos.GraphingCalculator(this.elt, {\n            expressions: false,\n            backgroundColor: '#F4F6F7',\n            textColor: '#C70039',\n        })\n        this.calculator.setExpression({\n            id: 'graph1',\n            latex: this.state.Funtion,\n        })\n        this.calculator.setExpression({\n            id: 'line1',\n            latex: 'x=' + this.state.XL,\n            lineStyle: Desmos.Styles.DASHED,\n        })\n        this.calculator.setExpression({\n            id: 'line2',\n            latex: 'x=' + this.state.XR,\n            lineStyle: Desmos.Styles.DASHED,\n        })\n        // this.bi();\n        document.getElementsByClassName(\n            'dcg-graphpaper-branding'\n        )[0].style.display = 'none'\n    }\n    componentDidUpdate() {\n        this.calculator.destroy()\n        this.elt = document.getElementById('calculator')\n        this.calculator = Desmos.GraphingCalculator(this.elt, {\n            expressions: false,\n            backgroundColor: '#F4F6F7',\n            textColor: '#C70039',\n        })\n        this.calculator.setExpression({\n            id: 'line3',\n            latex: this.state.XL + '<=x<=' + this.state.XR,\n            lineStyle: Desmos.Styles.DASHED,\n            color: this.calculator.colors.ORANGE,\n        })\n        this.calculator.setExpression({\n            id: 'graph1',\n            latex: this.state.Funtion,\n        })\n        this.calculator.setExpression({\n            id: 'line1',\n            latex: 'x=' + this.state.XL,\n            lineStyle: Desmos.Styles.DASHED,\n        })\n        this.calculator.setExpression({\n            id: 'line2',\n            latex: 'x=' + this.state.XR,\n            lineStyle: Desmos.Styles.DASHED,\n        })\n        console.log(this.calculator)\n        document.getElementsByClassName(\n            'dcg-graphpaper-branding'\n        )[0].style.display = 'none'\n    }\n\n    fn(x) {\n        return math.evaluate(this.state.Funtion, { x: x })\n    }\n\n    bi() {\n        var fn = this.fn\n        console.log(fn)\n        var data = []\n        data['xl'] = []\n        data['xr'] = []\n        data['x'] = []\n        data['error'] = []\n\n        var xl = Number(this.state.XL)\n        var xr = Number(this.state.XR)\n        var xmn,\n            xmo,\n            eps = 0.00001,\n            time = 0\n        var ans = []\n\n        xmn = (xl + xr) / 2\n        if (fn(xmn) * fn(xr) > 0) {\n            xr = xmn\n        } else if (fn(xmn) * fn(xr) < 0) {\n            xl = xmn\n        } else {\n            console.log('Iteration No. = ' + time)\n            console.log('Root of equation is ' + xmn.toFixed(6))\n            // ans.push(xmn.toFixed(6));\n            data['xl'][time] = xl\n            data['xr'][time] = xr\n            data['x'][time] = xmn.toFixed(6)\n            data['error'][time] = Math.abs(err).toFixed(6)\n            this.createTable(data['xl'], data['xr'], data['x'], data['error'])\n            this.forceUpdate()\n            return\n        }\n        data['xl'][0] = xl\n        data['xr'][0] = xr\n        data['x'][0] = xmn.toFixed(6)\n        data['error'][0] = Math.abs(err).toFixed(6)\n        while (true) {\n            if (time >= 1000) {\n                console.log('break')\n                break\n            }\n            time++\n            xmo = xmn\n            xmn = (xl + xr) / 2\n            if (fn(xmn) * fn(xr) > 0) {\n                xr = xmn\n            } else if (fn(xmn) * fn(xr) < 0) {\n                xl = xmn\n            } else {\n                // console.log(\"Root of equation is \" + xmn);\n                break\n            }\n            var err = Math.abs((xmn - xmo) / xmn)\n            if (err <= eps) {\n                break\n            }\n            data['xl'][time] = xl\n            data['xr'][time] = xr\n            data['x'][time] = xmn.toFixed(6)\n            data['error'][time] = Math.abs(err).toFixed(6)\n\n            console.log('Iteration No. = ' + time)\n            console.log('Root of equation is ' + xmn.toFixed(6))\n            ans.push(xmn.toFixed(6))\n        }\n        console.log('Iteration No. = ' + time)\n        console.log('Root of equation is ' + xmn.toFixed(6))\n        ans.push(xmn.toFixed(6))\n\n        data['xl'][time] = xl\n        data['xr'][time] = xr\n        data['x'][time] = xmn.toFixed(6)\n        data['error'][time] = Math.abs(err).toFixed(6)\n\n        this.createTable(data['xl'], data['xr'], data['x'], data['error'])\n        this.setState({ ans: ans })\n        // console.log(fn(2));\n        this.forceUpdate()\n    }\n\n    createTable(xl, xr, x, error) {\n        dataInTable = []\n        for (var i = 0; i < xl.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                xl: xl[i],\n                xr: xr[i],\n                x: x[i],\n                error: error[i],\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Bisection</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Funtion</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ Funtion: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.Funtion}\n                                name=\"Funtion\"\n                                placeholder=\"Funtion\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <p>XL</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ XL: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.XL}\n                                name=\"XL\"\n                                placeholder=\"XL\"\n                            />\n                            <p>XR</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ XR: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.XR}\n                                name=\"XR\"\n                                placeholder=\"XR\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi}>Submit</Button>\n                            <Button\n                                style={{\n                                    marginLeft: '10%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        <div\n                            id=\"calculator\"\n                            style={{\n                                width: '600px',\n                                height: '400px',\n                            }}\n                        ></div>\n                    </div>\n                </div>\n                <br></br>\n                <br></br>\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 7 }}\n                        columns={columns}\n                        dataSource={dataInTable}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Gauss_eliminate.js",["131","132","133","134","135"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nconst columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n]\n\nvar A = [],\n    B = [],\n    answer = [],\n    matrixA = [],\n    matrixB = []\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.createTable = this.createTable.bind(this)\n        this.initMatrix = this.initMatrix.bind(this)\n        this.state = { Dimension: null, chDi: false }\n    }\n\n    async Ex() {\n        // const url = \"https://api.randomuser.me/\";\n        const url = 'http://localhost:8000/data/gausselim'\n        // const url = \"http://127.0.0.1/Json/item.json\";\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Dimension: data.col,\n        })\n        this.createMatrix(this.state.Dimension, this.state.Dimension)\n\n        for (var i = 0; i < this.state.Dimension; i++) {\n            for (var j = 0; j < this.state.Dimension; j++) {\n                document.getElementById('a' + (i + 1) + '' + (j + 1)).value =\n                    data.A[i][j]\n                document.getElementById('b' + (i + 1)).value =\n                    data.B[i][0]\n            }\n        }\n    }\n\n    initMatrix() {\n        for (var i = 0; i < this.state.Dimension; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.Dimension; j++) {\n                A[i][j] = parseFloat(\n                    document.getElementById('a' + (i + 1) + '' + (j + 1)).value\n                )\n            }\n            B.push(parseFloat(document.getElementById('b' + (i + 1)).value))\n        }\n        console.log('initMatrix')\n    }\n\n    cal() {\n        var X = []\n        // data[\"x\"] = [];\n        var n = this.state.Dimension\n        console.log(A)\n        console.log(B)\n        this.initMatrix()\n        if (A[0][0] === 0) {\n            //pivoting\n            var tempRow = JSON.parse(JSON.stringify(A[0]))\n            var tempColumn = B[0]\n            A[0] = A[1]\n            A[1] = tempRow\n            B[0] = B[1]\n            B[1] = tempColumn\n        }\n        //Forward eliminated\n        for (var k = 0; k < n; k++) {\n            for (var i = k + 1; i < n; i++) {\n                var factor = A[i][k] / A[k][k]\n                for (var j = k; j < n; j++) {\n                    A[i][j] = A[i][j] - factor * A[k][j]\n                }\n                B[i] = B[i] - factor * B[k]\n            }\n        }\n        //Backward Substitution\n        // X = new Array(n);\n        X[n - 1] = Math.round(B[n - 1] / A[n - 1][n - 1]) //find Xn\n        for (i = n - 2; i >= 0; i--) {\n            //find Xn-1 to X1\n            var sum = B[i]\n            for (j = i + 1; j < n; j++) {\n                sum = sum - A[i][j] * X[j]\n            }\n            console.log(sum, A[i][i])\n            X[i] = Math.round(sum / A[i][i])\n        }\n        this.createTable(X)\n    }\n\n    bi() {\n        this.cal()\n        // this.createTable(data[\"x\"]);\n        console.log('submit')\n    }\n\n    createTable(x) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: 'X' + i,\n                x: x[i],\n            })\n        }\n        this.forceUpdate()\n    }\n\n    createMatrix(row, column) {\n        matrixA = []\n        matrixB = []\n        console.log(row + ' ' + column)\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(\n                    <Input\n                        style={{\n                            width: '15%',\n                            height: '50%',\n                            backgroundColor: 'black',\n                            marginInlineEnd: '5%',\n                            marginBlockEnd: '5%',\n                            color: 'white',\n                            fontSize: '18px',\n                            fontWeight: 'bold',\n                        }}\n                        id={'a' + i + '' + j}\n                        key={'a' + i + '' + j}\n                        placeholder={'a' + i + '' + j}\n                    />\n                )\n            }\n            matrixA.push(<br />)\n            matrixB.push(\n                <Input\n                    style={{\n                        width: '15%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'b' + i}\n                    key={'b' + i}\n                    placeholder={'b' + i}\n                />\n            )\n            matrixB.push(<br />)\n        }\n        this.setState({ chDi: true })\n        console.log(matrixA)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Gauss Elimination</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Dimension</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        Dimension: e.target.value,\n                                    })\n                                    this.createMatrix(\n                                        this.state.Dimension,\n                                        this.state.Dimension\n                                    )\n                                    this.forceUpdate()\n                                    //   console.log(this.state.Dimension);\n                                }}\n                                value={this.state.Dimension}\n                                name=\"Dimension\"\n                                placeholder=\"Dimension\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '50%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div\n                                style={{\n                                    textAlign: 'right',\n                                }}\n                            >\n                                <h2>Input Matrix A</h2>\n                                {matrixA}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div>\n                                <h2>Input Matrix B</h2>\n                                {matrixB}\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <br></br>\n                <br></br>\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns}\n                        dataSource={dataInTable}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Crammer.js",["136","137","138"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nconst columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n]\n\nvar A = [],\n    B = [],\n    answer = [],\n    matrixA = [],\n    matrixB = []\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.createTable = this.createTable.bind(this)\n        this.initMatrix = this.initMatrix.bind(this)\n        this.state = { Dimension: null, chDi: false }\n    }\n    //API\n    async Ex() {\n        // const url = \"https://api.randomuser.me/\";\n        const url = 'http://localhost:8000/data/cramer'\n        // const url = \"http://127.0.0.1/Json/item.json\";\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Dimension: data.col,\n        })\n        this.createMatrix(this.state.Dimension, this.state.Dimension)\n\n        for (var i = 0; i < this.state.Dimension; i++) {\n            for (var j = 0; j < this.state.Dimension; j++) {\n                document.getElementById('a' + (i + 1) + '' + (j + 1)).value =\n                    data.A[i][j]\n                document.getElementById('b' + (i + 1)).value =\n                    data.B[i][0]\n            }\n        }\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n    }\n\n    initMatrix() {\n        for (var i = 0; i < this.state.Dimension; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.Dimension; j++) {\n                A[i][j] = parseFloat(\n                    document.getElementById('a' + (i + 1) + '' + (j + 1)).value\n                )\n            }\n            B[i] = []\n            B[i].push(parseFloat(document.getElementById('b' + (i + 1)).value))\n        }\n        console.log('initMatrix')\n    }\n\n    cal() {\n        var data = []\n        data['x'] = []\n        console.log(A)\n        console.log(B)\n        var a = math.matrix(A)\n        var b = math.matrix(B)\n        for (let i = 0; i < a.size()[0]; i++) {\n            data['x'].push(\n                math.round(\n                    math.det(\n                        math.subset(\n                            a,\n                            math.index(math.range(0, a.size()[0]), i),\n                            math.subset(\n                                b,\n                                math.index(math.range(0, a.size()[0]), 0)\n                            )\n                        )\n                    )\n                ) / math.round(math.det(a))\n            )\n        }\n        this.createTable(data['x'])\n    }\n\n    bi() {\n        this.initMatrix()\n        this.cal()\n        // this.createTable(data[\"x\"]);\n        console.log('submit')\n    }\n\n    createTable(x) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: 'X' + i,\n                x: x[i],\n            })\n        }\n        this.forceUpdate()\n    }\n\n    createMatrix(row, column) {\n        matrixA = []\n        matrixB = []\n        console.log(row + ' ' + column)\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(\n                    <Input\n                        style={{\n                            width: '15%',\n                            height: '50%',\n                            backgroundColor: 'black',\n                            marginInlineEnd: '5%',\n                            marginBlockEnd: '5%',\n                            color: 'white',\n                            fontSize: '18px',\n                            fontWeight: 'bold',\n                        }}\n                        id={'a' + i + '' + j}\n                        key={'a' + i + '' + j}\n                        placeholder={'a' + i + '' + j}\n                    />\n                )\n            }\n            matrixA.push(<br />)\n            matrixB.push(\n                <Input\n                    style={{\n                        width: '15%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'b' + i}\n                    key={'b' + i}\n                    placeholder={'b' + i}\n                />\n            )\n            matrixB.push(<br />)\n        }\n        this.setState({ chDi: true })\n        console.log(matrixA)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Cramer's Rule</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Dimension</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        Dimension: e.target.value,\n                                    })\n                                    this.createMatrix(\n                                        this.state.Dimension,\n                                        this.state.Dimension\n                                    )\n                                    this.forceUpdate()\n                                    //   console.log(this.state.Dimension);\n                                }}\n                                value={this.state.Dimension}\n                                name=\"Dimension\"\n                                placeholder=\"Dimension\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '50%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div\n                                style={{\n                                    textAlign: 'right',\n                                }}\n                            >\n                                <h2>Input Matrix A</h2>\n                                {matrixA}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div>\n                                <h2>Input Matrix B</h2>\n                                {matrixB}\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <br></br>\n                <br></br>\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns}\n                        dataSource={dataInTable}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Conjugate_Gradient.js",["139","140","141","142","143"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nimport { det, add, subtract, multiply, transpose } from 'mathjs'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\n\nvar A = [],\n    B = [],\n    matrixA = [],\n    matrixB = [],\n    matrixX = [],\n    epsilon,\n    count = 1,\n    output,\n    x = []\n\nvar columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n    {\n        title: 'λ',\n        dataIndex: 'lambda',\n        key: 'lambda',\n    },\n    {\n        title: '{X}',\n        dataIndex: 'X',\n        key: 'X',\n    },\n    {\n        title: 'Error',\n        dataIndex: 'error',\n        key: 'error',\n    },\n]\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.createTable = this.createTable.bind(this)\n        this.initMatrix = this.initMatrix.bind(this)\n        this.state = { Dimension: null, chDi: false, showOutputCard: false }\n    }\n    //API\n    async Ex() {\n        const url = 'http://localhost:8000/data/conjugate'\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Dimension: data.col,\n        })\n        this.createMatrix(this.state.Dimension, this.state.Dimension)\n\n        for (var i = 0; i < this.state.Dimension; i++) {\n            for (var j = 0; j < this.state.Dimension; j++) {\n                document.getElementById('a' + (i + 1) + '' + (j + 1)).value =\n                    data.A[i][j]\n                document.getElementById('b' + (i + 1)).value =\n                    data.B[0]\n                document.getElementById('x' + (i + 1)).value =\n                    data.X[i]\n            }\n        }\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n        // this.initialSchema(this.state.Dimension);\n    }\n\n    initMatrix() {\n        for (var i = 0; i < this.state.Dimension; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.Dimension; j++) {\n                A[i][j] = parseFloat(\n                    document.getElementById('a' + (i + 1) + '' + (j + 1)).value\n                )\n            }\n            B.push(parseFloat(document.getElementById('b' + (i + 1)).value))\n            x.push(parseFloat(document.getElementById('x' + (i + 1)).value))\n        }\n        console.log('initMatrix')\n        console.log(x)\n    }\n\n    positive_definite(dimention) {\n        console.log('A', dimention)\n        console.log(A)\n        var tempMatrix = []\n        for (var i = 0; i < dimention; i++) {\n            tempMatrix[i] = []\n            for (var j = 0; j < dimention; j++) {\n                tempMatrix[i][j] = A[i][j]\n            }\n        }\n        if (det(tempMatrix) <= 0) {\n            return false\n        }\n        if (dimention !== this.state.Dimension - 1) {\n            return this.positive_definite(++dimention)\n        }\n        return true\n    }\n\n    cal() {\n        // var n = this.state.Dimension;\n        this.initMatrix()\n        if (!this.positive_definite(1)) {\n            output = \"This matrix doesn't positive definite\"\n            this.setState({\n                showOutputCard: true,\n            })\n            return false\n        }\n        //find {R0}\n        var R = subtract(multiply(A, x), B)\n        console.log(R)\n        //find D0\n        var D = multiply(R, -1)\n        console.log(D)\n        do {\n            //find λ\n            var λ =\n                multiply(multiply(transpose(D), R), -1) /\n                multiply(multiply(transpose(D), A), D)\n            console.log(λ)\n            /*------------------------------------------------------------------*/\n\n            //find new {X}\n            x = add(x, multiply(λ, D))\n            console.log(x)\n            //find new {R}\n            R = subtract(multiply(A, x), B)\n            console.log(R)\n            //find epsilon\n            epsilon = Math.sqrt(multiply(transpose(R), R)).toFixed(8)\n            this.appendTable(\n                λ,\n                JSON.stringify(x).split(',').join(',\\n'),\n                epsilon\n            )\n            console.log(epsilon)\n            var α =\n                multiply(multiply(transpose(R), A), D) /\n                multiply(transpose(D), multiply(A, D)).toFixed(8)\n            console.log(α)\n            D = add(multiply(R, -1), multiply(α, D))\n            console.log(D)\n        } while (epsilon > 0.000001)\n        output = x\n        this.setState({\n            showOutputCard: true,\n        })\n        this.forceUpdate()\n    }\n\n    appendTable(lambda, x, error) {\n        dataInTable.push({\n            iteration: count++,\n            lambda: lambda,\n            X: x,\n            error: error,\n        })\n    }\n\n    bi() {\n        this.cal()\n        console.log('submit')\n    }\n\n    createTable(x) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: 'X' + i,\n                x: x[i],\n            })\n        }\n        this.forceUpdate()\n    }\n\n    createMatrix(row, column) {\n        matrixA = []\n        matrixB = []\n        matrixX = []\n        console.log(row + ' ' + column)\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(\n                    <Input\n                        style={{\n                            width: '15%',\n                            height: '50%',\n                            backgroundColor: 'black',\n                            marginInlineEnd: '5%',\n                            marginBlockEnd: '5%',\n                            color: 'white',\n                            fontSize: '18px',\n                            fontWeight: 'bold',\n                        }}\n                        id={'a' + i + '' + j}\n                        key={'a' + i + '' + j}\n                        placeholder={'a' + i + '' + j}\n                    />\n                )\n            }\n            matrixA.push(<br />)\n            matrixB.push(\n                <Input\n                    style={{\n                        width: '15%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'b' + i}\n                    key={'b' + i}\n                    placeholder={'b' + i}\n                />\n            )\n            matrixB.push(<br />)\n            matrixX.push(\n                <Input\n                    style={{\n                        width: '18%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'x' + i}\n                    key={'x' + i}\n                    placeholder={'x' + i}\n                />\n            )\n        }\n        this.setState({ chDi: true })\n        console.log('matrixX')\n        console.log(matrixX)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Conjugate Gradient</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Dimension</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        Dimension: e.target.value,\n                                    })\n                                    this.createMatrix(\n                                        this.state.Dimension,\n                                        this.state.Dimension\n                                    )\n\n                                    this.forceUpdate()\n                                    //   console.log(this.state.Dimension);\n                                }}\n                                value={this.state.Dimension}\n                                name=\"Dimension\"\n                                placeholder=\"Dimension\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '50%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div\n                                style={{\n                                    textAlign: 'right',\n                                }}\n                            >\n                                <h2>Input Matrix A</h2>\n                                {matrixA}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div>\n                                <h2>Input Matrix B</h2>\n                                {matrixB}\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {this.state.chDi && (\n                    <div>\n                        <h2>Input Matrix X</h2>\n                        {matrixX}\n                    </div>\n                )}\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                {this.state.showOutputCard && (\n                    <Card\n                        title={'Output'}\n                        bordered={true}\n                        style={{\n                            width: '100%',\n                            background: '#2196f3',\n                            color: '#FFFFFFFF',\n                        }}\n                        id=\"outputCard\"\n                    >\n                        <Table\n                            pagination={{ defaultPageSize: 5 }}\n                            columns={columns}\n                            // bordered\n                            dataSource={dataInTable}\n                            bodyStyle={{\n                                fontWeight: 'bold',\n                                fontSize: '18px',\n                                color: 'black',\n                            }}\n                        ></Table>\n                    </Card>\n                )}\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Interpolation\\Newton.js",["144","145","146","147","148"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nvar columns2 = [\n    {\n        title: 'Ans',\n        dataIndex: 'Ans',\n        key: 'Ans',\n    },\n]\n\nvar columns1 = [\n    {\n        title: 'No.',\n        dataIndex: 'no',\n        key: 'no',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n    {\n        title: 'Y',\n        dataIndex: 'y',\n        key: 'y',\n    },\n]\nvar x = [],\n    y = [],\n    tableTag = [],\n    interpolatePoint = [],\n    tempTag = [],\n    fx\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.state = {\n            nPoints: null,\n            ans: [],\n            X: null,\n            interpolatePoint: null,\n            showTableInput: false,\n            showTableInpu2: false,\n        }\n        this.elt = {}\n        this.calculator = {}\n    }\n    //API\n    async Ex() {\n        const url = 'http://localhost:8000/data/nd'\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            nPoints: data.col,\n            X: data.Xi,\n            interpolatePoint: data.i,\n        })\n        console.log('nPoints', this.state.nPoints)\n        this.createTableInput(parseInt(this.state.nPoints))\n\n        for (var i = 0; i < this.state.nPoints; i++) {\n            document.getElementById('x' + (i + 1)).value = data.X[i]\n            document.getElementById('y' + (i + 1)).value = data.Y[i]\n        }\n\n        this.createInterpolatePointInput()\n        for (var i = 0; i < this.state.interpolatePoint; i++) {\n            document.getElementById('p' + (i + 1)).value = data.p[i]\n        }\n        this.forceUpdate()\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n    }\n    componentDidUpdate() {}\n\n    initialValue() {\n        x = []\n        y = []\n        for (var i = 1; i <= this.state.nPoints; i++) {\n            x[i] = parseFloat(document.getElementById('x' + i).value)\n            y[i] = parseFloat(document.getElementById('y' + i).value)\n        }\n        for (i = 1; i <= this.state.interpolatePoint; i++) {\n            interpolatePoint[i] = parseInt(\n                document.getElementById('p' + i).value\n            )\n        }\n        console.log('initialValue')\n    }\n\n    C(n) {\n        console.log('C', n)\n        if (n === 1) {\n            return 0\n        } else {\n            return (\n                (y[interpolatePoint[n]] - y[interpolatePoint[n - 1]]) /\n                    (x[interpolatePoint[n]] - x[interpolatePoint[n - 1]]) -\n                this.C(n - 1)\n            )\n        }\n    }\n    findX(n, X) {\n        if (n < 1) {\n            return 1\n        } else {\n            console.log(X + ' - ' + x[interpolatePoint[n]])\n            return (X - x[interpolatePoint[n]]) * this.findX(n - 1, X)\n        }\n    }\n\n    newton_difference(n, X) {\n        this.initialValue()\n        fx = y[1]\n        if (n === 2) {\n            //if linear interpolate\n            fx +=\n                ((y[interpolatePoint[2]] - y[interpolatePoint[1]]) /\n                    (x[interpolatePoint[2]] - x[interpolatePoint[1]])) *\n                (X - x[interpolatePoint[1]])\n        } else {\n            for (var i = 2; i <= n; i++) {\n                fx +=\n                    (this.C(i) /\n                        (x[interpolatePoint[i]] - x[interpolatePoint[1]])) *\n                    this.findX(i - 1, X)\n            }\n        }\n\n        this.setState({\n            showOutputCard: true,\n        })\n    }\n    bi() {\n        this.newton_difference(\n            parseInt(this.state.interpolatePoint),\n            parseFloat(this.state.X)\n        )\n        dataInTable = []\n        dataInTable.push({\n            Ans: fx,\n        })\n\n        console.log(fx)\n        console.log('end')\n    }\n\n    createInterpolatePointInput() {\n        tempTag = []\n        for (var i = 1; i <= this.state.interpolatePoint; i++) {\n            tempTag.push(\n                <Input\n                    style={{\n                        width: '14%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'p' + i}\n                    key={'p' + i}\n                    placeholder={'p' + i}\n                />\n            )\n        }\n        this.setState({\n            showTableInput2: true,\n        })\n    }\n\n    createTableInput(n) {\n        x = []\n        y = []\n        tableTag = []\n        for (var i = 1; i <= n; i++) {\n            x.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'x' + i}\n                    key={'x' + i}\n                    placeholder={'x' + i}\n                />\n            )\n            y.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'y' + i}\n                    key={'y' + i}\n                    placeholder={'y' + i}\n                />\n            )\n            tableTag.push({\n                no: i,\n                x: x[i - 1],\n                y: y[i - 1],\n            })\n        }\n\n        this.setState({\n            showTableInput: true,\n        })\n        console.log(x, y, tableTag)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Newton Divided Difference</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Number of points (n)</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        nPoints: e.target.value,\n                                    })\n                                    this.createTableInput(\n                                        parseInt(this.state.nPoints)\n                                    )\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.nPoints}\n                                name=\"nPoints\"\n                                placeholder=\"Number of points (n)\"\n                            />\n                            <p>X</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ X: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.X}\n                                name=\"X\"\n                                placeholder=\"X\"\n                            />\n                            <p>interpolatePoint</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        interpolatePoint: e.target.value,\n                                    })\n                                    this.createInterpolatePointInput()\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.interpolatePoint}\n                                name=\"interpolatePoint\"\n                                placeholder=\"interpolatePoint\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '73%',\n                                    backgroundColor: '#76D7C4',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showTableInput && (\n                            <div>\n                                <Table\n                                    columns={columns1}\n                                    dataSource={tableTag}\n                                    pagination={false}\n                                    bordered={true}\n                                    bodyStyle={{\n                                        fontWeight: 'bold',\n                                        fontSize: '18px',\n                                        color: 'white',\n                                        overflowY: 'scroll',\n                                        minWidth: 120,\n                                        maxHeight: 300,\n                                    }}\n                                ></Table>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {this.state.showTableInput2 && (\n                    <div>\n                        <h2>\n                            interpolatePoint{' '}\n                            {parseInt(this.state.interpolatePoint) === 2\n                                ? '(Linear)'\n                                : parseInt(this.state.interpolatePoint) === 3\n                                ? '(Quadratic)'\n                                : '(Polynomial)'}\n                        </h2>\n                        {tempTag}\n                    </div>\n                )}\n\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns2}\n                        dataSource={dataInTable}\n                        pagination1={false}\n                        bordered={true}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Gauss_Jordan.js",["149","150"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nconst columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n]\n\nvar A = [],\n    B = [],\n    answer = [],\n    matrixA = [],\n    matrixB = []\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.createTable = this.createTable.bind(this)\n        this.initMatrix = this.initMatrix.bind(this)\n        this.state = { Dimension: null, chDi: false }\n    }\n    //API\n    async Ex() {\n        // const url = \"https://api.randomuser.me/\";\n        const url = 'http://localhost:8000/data/gaussjordan'\n        // const url = \"http://127.0.0.1/Json/item.json\";\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Dimension: data.col,\n        })\n        this.createMatrix(this.state.Dimension, this.state.Dimension)\n\n        for (var i = 0; i < this.state.Dimension; i++) {\n            for (var j = 0; j < this.state.Dimension; j++) {\n                document.getElementById('a' + (i + 1) + '' + (j + 1)).value =\n                    data.A[i][j]\n                document.getElementById('b' + (i + 1)).value =\n                    data.B[i][0]\n            }\n        }\n    }\n\n    initMatrix() {\n        A = []\n        B = []\n        for (var i = 0; i < this.state.Dimension; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.Dimension; j++) {\n                A[i][j] = parseFloat(\n                    document.getElementById('a' + (i + 1) + '' + (j + 1)).value\n                )\n            }\n            B.push(parseFloat(document.getElementById('b' + (i + 1)).value))\n        }\n        console.log('initMatrix')\n    }\n\n    cal() {\n        var n = this.state.Dimension\n        console.log('A', A)\n        console.log('B', B)\n        this.initMatrix()\n        if (A[0][0] === 0) {\n            //pivoting\n            var tempRow = JSON.parse(JSON.stringify(A[0]))\n            var tempColumn = B[0]\n            A[0] = A[1]\n            A[1] = tempRow\n            B[0] = B[1]\n            B[1] = tempColumn\n        }\n        //Forward eliminate\n        for (var k = 0; k < n; k++) {\n            for (var i = k + 1; i < n; i++) {\n                var factor = A[i][k] / A[k][k]\n                for (var j = k; j < n; j++) {\n                    A[i][j] = A[i][j] - factor * A[k][j]\n                }\n                B[i] = B[i] - factor * B[k]\n            }\n        }\n        //Backward Substitution\n        for (k = n - 1; k >= 0; k--) {\n            for (i = k; i >= 0; i--) {\n                if (i === k) {\n                    //Identity matrix\n                    factor = 1 / A[i][k]\n\n                    for (j = 0; j < n; j++) {\n                        A[i][j] = A[i][j] * factor\n                    }\n                    B[i] = math.round(B[i] * factor)\n                } else {\n                    factor = A[i][k] / A[k][k]\n                    for (j = 0; j < n; j++) {\n                        A[i][j] = A[i][j] - factor * A[k][j]\n                    }\n                    B[i] = B[i] - factor * B[k]\n                }\n            }\n        }\n        this.createTable(B)\n    }\n\n    bi() {\n        this.cal()\n        // this.createTable(data[\"x\"]);\n        console.log('submit')\n    }\n\n    createTable(x) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: 'X' + i,\n                x: x[i],\n            })\n        }\n        this.forceUpdate()\n    }\n\n    createMatrix(row, column) {\n        matrixA = []\n        matrixB = []\n        console.log(row + ' ' + column)\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(\n                    <Input\n                        style={{\n                            width: '15%',\n                            height: '50%',\n                            backgroundColor: 'black',\n                            marginInlineEnd: '5%',\n                            marginBlockEnd: '5%',\n                            color: 'white',\n                            fontSize: '18px',\n                            fontWeight: 'bold',\n                        }}\n                        id={'a' + i + '' + j}\n                        key={'a' + i + '' + j}\n                        placeholder={'a' + i + '' + j}\n                    />\n                )\n            }\n            matrixA.push(<br />)\n            matrixB.push(\n                <Input\n                    style={{\n                        width: '15%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'b' + i}\n                    key={'b' + i}\n                    placeholder={'b' + i}\n                />\n            )\n            matrixB.push(<br />)\n        }\n        this.setState({ chDi: true })\n        console.log(matrixA)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Gauss Jordan</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Dimension</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        Dimension: e.target.value,\n                                    })\n                                    this.createMatrix(\n                                        this.state.Dimension,\n                                        this.state.Dimension\n                                    )\n                                    this.forceUpdate()\n                                    //   console.log(this.state.Dimension);\n                                }}\n                                value={this.state.Dimension}\n                                name=\"Dimension\"\n                                placeholder=\"Dimension\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '50%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div\n                                style={{\n                                    textAlign: 'right',\n                                }}\n                            >\n                                <h2>Input Matrix A</h2>\n                                {matrixA}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div>\n                                <h2>Input Matrix B</h2>\n                                {matrixB}\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <br></br>\n                <br></br>\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns}\n                        dataSource={dataInTable}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Jacobi.js",["151","152","153","154","155","156","157"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nimport { lusolve, format } from 'mathjs'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\n\nvar A = [],\n    B = [],\n    answer = [],\n    matrixA = [],\n    matrixB = [],\n    matrixX = [],\n    epsilon,\n    count = 1,\n    x = []\n\nvar columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n]\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.createTable = this.createTable.bind(this)\n        this.initMatrix = this.initMatrix.bind(this)\n        this.state = { Dimension: null, chDi: false, showOutputCard: false }\n    }\n    //API\n    async Ex() {\n        // const url = \"https://api.randomuser.me/\";\n        const url = 'http://localhost:8000/data/jacobi'\n        // const url = \"http://127.0.0.1/Json/item.json\";\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Dimension: data.col,\n        })\n        this.createMatrix(this.state.Dimension, this.state.Dimension)\n\n        for (var i = 0; i < this.state.Dimension; i++) {\n            for (var j = 0; j < this.state.Dimension; j++) {\n                document.getElementById('a' + (i + 1) + '' + (j + 1)).value =\n                    data.A[i][j]\n                document.getElementById('b' + (i + 1)).value =\n                    data.B[i][0]\n                document.getElementById('x' + (i + 1)).value = data.X[i]\n            }\n        }\n        this.initialSchema(this.state.Dimension)\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n        // this.initialSchema(this.state.Dimension);\n    }\n\n    initMatrix() {\n        for (var i = 0; i < this.state.Dimension; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.Dimension; j++) {\n                A[i][j] = parseFloat(\n                    document.getElementById('a' + (i + 1) + '' + (j + 1)).value\n                )\n            }\n            B.push(parseFloat(document.getElementById('b' + (i + 1)).value))\n            x.push(parseFloat(document.getElementById('x' + (i + 1)).value))\n        }\n        console.log('initMatrix')\n        console.log(x)\n    }\n\n    cal() {\n        var n = this.state.Dimension\n        this.initMatrix()\n        var temp\n        var xold\n        epsilon = new Array(n)\n        console.log('while')\n        do {\n            temp = []\n            xold = JSON.parse(JSON.stringify(x))\n            for (var i = 0; i < n; i++) {\n                var sum = 0\n                for (var j = 0; j < n; j++) {\n                    if (i !== j) {\n                        //else i == j That is a divide number\n                        sum = sum + A[i][j] * x[j]\n                    }\n                }\n                temp[i] = (B[i] - sum) / A[i][i] //update x[i]\n            }\n            x = JSON.parse(JSON.stringify(temp))\n            console.log('count', count)\n            if (count >= 1000) {\n                break\n            }\n        } while (this.error(x, xold)) //if true , continue next iteration\n        this.setState({\n            showOutputCard: true,\n        })\n    }\n\n    error(xnew, xold) {\n        for (var i = 0; i < xnew.length; i++) {\n            epsilon[i] = Math.abs((xnew[i] - xold[i]) / xnew[i])\n            if (x[i] == null) {\n                return true\n            }\n        }\n\n        this.appendTable(x, epsilon)\n        for (i = 0; i < epsilon.length; i++) {\n            if (epsilon[i] > 0.000001) {\n                return true\n            }\n        }\n        return false\n    }\n\n    appendTable(x, error) {\n        console.log('appendTable')\n        console.log(x, error)\n        var tag = ''\n        tag += '{\"iteration\": ' + count++ + ','\n        for (var i = 0; i < x.length; i++) {\n            tag +=\n                '\"x' +\n                (i + 1) +\n                '\": ' +\n                x[i].toFixed(8) +\n                ', \"error' +\n                (i + 1) +\n                '\": ' +\n                error[i].toFixed(8)\n            if (i !== x.length - 1) {\n                tag += ','\n            }\n        }\n        tag += '}'\n        dataInTable.push(JSON.parse(tag))\n        console.log(dataInTable)\n        this.forceUpdate()\n    }\n\n    bi() {\n        this.cal()\n        // this.createTable(data[\"x\"]);\n        console.log('submit')\n    }\n\n    createTable(x) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: 'X' + i,\n                x: x[i],\n            })\n        }\n        this.forceUpdate()\n    }\n\n    createMatrix(row, column) {\n        matrixA = []\n        matrixB = []\n        matrixX = []\n        console.log(row + ' ' + column)\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(\n                    <Input\n                        style={{\n                            width: '15%',\n                            height: '50%',\n                            backgroundColor: 'black',\n                            marginInlineEnd: '5%',\n                            marginBlockEnd: '5%',\n                            color: 'white',\n                            fontSize: '18px',\n                            fontWeight: 'bold',\n                        }}\n                        id={'a' + i + '' + j}\n                        key={'a' + i + '' + j}\n                        placeholder={'a' + i + '' + j}\n                    />\n                )\n            }\n            matrixA.push(<br />)\n            matrixB.push(\n                <Input\n                    style={{\n                        width: '15%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'b' + i}\n                    key={'b' + i}\n                    placeholder={'b' + i}\n                />\n            )\n            matrixB.push(<br />)\n            matrixX.push(\n                <Input\n                    style={{\n                        width: '18%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'x' + i}\n                    key={'x' + i}\n                    placeholder={'x' + i}\n                />\n            )\n        }\n        this.setState({ chDi: true })\n        console.log('matrixX')\n        console.log(matrixX)\n    }\n\n    initialSchema(n) {\n        for (var i = 1; i <= n; i++) {\n            columns.push({\n                title: 'X' + i,\n                dataIndex: 'x' + i,\n                key: 'x' + i,\n            })\n        }\n        for (i = 1; i <= n; i++) {\n            columns.push({\n                title: 'Error' + i,\n                dataIndex: 'error' + i,\n                key: 'error' + i,\n            })\n        }\n        console.log('initialSchema')\n        console.log(columns)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Jacobi Iteration</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Dimension</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        Dimension: e.target.value,\n                                    })\n                                    this.createMatrix(\n                                        this.state.Dimension,\n                                        this.state.Dimension\n                                    )\n\n                                    this.forceUpdate()\n                                    //   console.log(this.state.Dimension);\n                                }}\n                                value={this.state.Dimension}\n                                name=\"Dimension\"\n                                placeholder=\"Dimension\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '50%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div\n                                style={{\n                                    textAlign: 'right',\n                                }}\n                            >\n                                <h2>Input Matrix A</h2>\n                                {matrixA}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div>\n                                <h2>Input Matrix B</h2>\n                                {matrixB}\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {this.state.chDi && (\n                    <div>\n                        <h2>Input Matrix X</h2>\n                        {matrixX}\n                    </div>\n                )}\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                {this.state.showOutputCard && (\n                    <Card\n                        title={'Output'}\n                        bordered={true}\n                        style={{\n                            width: '100%',\n                            background: '#2196f3',\n                            color: '#FFFFFFFF',\n                        }}\n                        id=\"outputCard\"\n                    >\n                        <Table\n                            pagination={{ defaultPageSize: 5 }}\n                            columns={columns}\n                            // bordered\n                            dataSource={dataInTable}\n                            bodyStyle={{\n                                fontWeight: 'bold',\n                                fontSize: '18px',\n                                color: 'black',\n                            }}\n                        ></Table>\n                    </Card>\n                )}\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Linear Algebra\\Gauss_seidel.js",["158","159","160","161","162","163","164"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nimport { lusolve, format } from 'mathjs'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\n\nvar A = [],\n    B = [],\n    answer = [],\n    matrixA = [],\n    matrixB = [],\n    matrixX = [],\n    epsilon,\n    count = 1,\n    x = []\n\nvar columns = [\n    {\n        title: 'Iteration',\n        dataIndex: 'iteration',\n        key: 'iteration',\n    },\n]\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.createTable = this.createTable.bind(this)\n        this.initMatrix = this.initMatrix.bind(this)\n        this.state = { Dimension: null, chDi: false, showOutputCard: false }\n    }\n    //API\n    async Ex() {\n        // const url = \"https://api.randomuser.me/\";\n        const url = 'http://localhost:8000/data/gauss_seidel'\n        // const url = \"http://127.0.0.1/Json/item.json\";\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            Dimension: data.col,\n        })\n        this.createMatrix(this.state.Dimension, this.state.Dimension)\n\n        for (var i = 0; i < this.state.Dimension; i++) {\n            for (var j = 0; j < this.state.Dimension; j++) {\n                document.getElementById('a' + (i + 1) + '' + (j + 1)).value =\n                    data.A[i][j]\n                document.getElementById('b' + (i + 1)).value =\n                    data.B[0]\n                document.getElementById('x' + (i + 1)).value =\n                    data.X[i]\n            }\n        }\n        this.initialSchema(this.state.Dimension)\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n        // this.initialSchema(this.state.Dimension);\n    }\n\n    initMatrix() {\n        for (var i = 0; i < this.state.Dimension; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.Dimension; j++) {\n                A[i][j] = parseFloat(\n                    document.getElementById('a' + (i + 1) + '' + (j + 1)).value\n                )\n            }\n            B.push(parseFloat(document.getElementById('b' + (i + 1)).value))\n            x.push(parseFloat(document.getElementById('x' + (i + 1)).value))\n        }\n        console.log('initMatrix')\n        console.log(x)\n    }\n\n    cal() {\n        var n = this.state.Dimension\n        this.initMatrix()\n        var xold\n        epsilon = new Array(n)\n        do {\n            xold = JSON.parse(JSON.stringify(x))\n            for (var i = 0; i < n; i++) {\n                var sum = 0\n                for (var j = 0; j < n; j++) {\n                    if (i !== j) {\n                        //else i == j That is a divide number\n                        sum = sum + A[i][j] * x[j]\n                    }\n                }\n                x[i] = (B[i] - sum) / A[i][i] //update x[i]\n            }\n            console.log('count', count)\n            if (count >= 1000) {\n                break\n            }\n        } while (this.error(x, xold)) //if true , continue next iteration\n        this.setState({\n            showOutputCard: true,\n        })\n    }\n\n    error(xnew, xold) {\n        for (var i = 0; i < xnew.length; i++) {\n            epsilon[i] = Math.abs((xnew[i] - xold[i]) / xnew[i])\n            if (x[i] == null) {\n                return true\n            }\n        }\n\n        this.appendTable(x, epsilon)\n        for (i = 0; i < epsilon.length; i++) {\n            if (epsilon[i] > 0.000001) {\n                return true\n            }\n        }\n        return false\n    }\n\n    appendTable(x, error) {\n        console.log('appendTable')\n        console.log(x, error)\n        var tag = ''\n        tag += '{\"iteration\": ' + count++ + ','\n        for (var i = 0; i < x.length; i++) {\n            tag +=\n                '\"x' +\n                (i + 1) +\n                '\": ' +\n                x[i].toFixed(8) +\n                ', \"error' +\n                (i + 1) +\n                '\": ' +\n                error[i].toFixed(8)\n            if (i !== x.length - 1) {\n                tag += ','\n            }\n        }\n        tag += '}'\n        dataInTable.push(JSON.parse(tag))\n        console.log(dataInTable)\n        this.forceUpdate()\n    }\n\n    bi() {\n        this.cal()\n        // this.createTable(data[\"x\"]);\n        console.log('submit')\n    }\n\n    createTable(x) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: 'X' + i,\n                x: x[i],\n            })\n        }\n        this.forceUpdate()\n    }\n\n    createMatrix(row, column) {\n        matrixA = []\n        matrixB = []\n        matrixX = []\n        console.log(row + ' ' + column)\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(\n                    <Input\n                        style={{\n                            width: '15%',\n                            height: '50%',\n                            backgroundColor: 'black',\n                            marginInlineEnd: '5%',\n                            marginBlockEnd: '5%',\n                            color: 'white',\n                            fontSize: '18px',\n                            fontWeight: 'bold',\n                        }}\n                        id={'a' + i + '' + j}\n                        key={'a' + i + '' + j}\n                        placeholder={'a' + i + '' + j}\n                    />\n                )\n            }\n            matrixA.push(<br />)\n            matrixB.push(\n                <Input\n                    style={{\n                        width: '15%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'b' + i}\n                    key={'b' + i}\n                    placeholder={'b' + i}\n                />\n            )\n            matrixB.push(<br />)\n            matrixX.push(\n                <Input\n                    style={{\n                        width: '18%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'x' + i}\n                    key={'x' + i}\n                    placeholder={'x' + i}\n                />\n            )\n        }\n        this.setState({ chDi: true })\n        console.log('matrixX')\n        console.log(matrixX)\n    }\n\n    initialSchema(n) {\n        for (var i = 1; i <= n; i++) {\n            columns.push({\n                title: 'X' + i,\n                dataIndex: 'x' + i,\n                key: 'x' + i,\n            })\n        }\n        for (i = 1; i <= n; i++) {\n            columns.push({\n                title: 'Error' + i,\n                dataIndex: 'error' + i,\n                key: 'error' + i,\n            })\n        }\n        console.log('initialSchema')\n        console.log(columns)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Gauss Seidel</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Dimension</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        Dimension: e.target.value,\n                                    })\n                                    this.createMatrix(\n                                        this.state.Dimension,\n                                        this.state.Dimension\n                                    )\n\n                                    this.forceUpdate()\n                                    //   console.log(this.state.Dimension);\n                                }}\n                                value={this.state.Dimension}\n                                name=\"Dimension\"\n                                placeholder=\"Dimension\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '50%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div\n                                style={{\n                                    textAlign: 'right',\n                                }}\n                            >\n                                <h2>Input Matrix A</h2>\n                                {matrixA}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"col\">\n                        {this.state.chDi && (\n                            <div>\n                                <h2>Input Matrix B</h2>\n                                {matrixB}\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {this.state.chDi && (\n                    <div>\n                        <h2>Input Matrix X</h2>\n                        {matrixX}\n                    </div>\n                )}\n                {/* {this.state.ans.map((data, i) => {\n          return (\n            <p>\n              Iteration No.{i + 1} Root of equation is {data}\n            </p>\n          );\n        })} */}\n                {this.state.showOutputCard && (\n                    <Card\n                        title={'Output'}\n                        bordered={true}\n                        style={{\n                            width: '100%',\n                            background: '#2196f3',\n                            color: '#FFFFFFFF',\n                        }}\n                        id=\"outputCard\"\n                    >\n                        <Table\n                            pagination={{ defaultPageSize: 5 }}\n                            columns={columns}\n                            // bordered\n                            dataSource={dataInTable}\n                            bodyStyle={{\n                                fontWeight: 'bold',\n                                fontSize: '18px',\n                                color: 'black',\n                            }}\n                        ></Table>\n                    </Card>\n                )}\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Interpolation\\Lagrange.js",["165"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport { addStyles } from 'react-mathquill'\nimport Graph from '../components/Graph'\n\naddStyles()\n\nvar dataInTable = []\nvar columns2 = [\n    {\n        title: 'Ans',\n        dataIndex: 'Ans',\n        key: 'Ans',\n    },\n]\n\nvar columns1 = [\n    {\n        title: 'No.',\n        dataIndex: 'no',\n        key: 'no',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n    {\n        title: 'Y',\n        dataIndex: 'y',\n        key: 'y',\n    },\n]\nvar x = [],\n    y = [],\n    tableTag = [],\n    interpolatePoint = [],\n    tempTag = [],\n    fx\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.state = {\n            nPoints: null,\n            ans: [],\n            X: null,\n            rows: [],\n            interpolatePoint: null,\n            showTableInput: false,\n            showTableInpu2: false,\n        }\n        this.elt = {}\n        this.calculator = {}\n        this.plot = []\n    }\n\n    //API\n    async Ex() {\n        const url = 'http://localhost:8000/data/lg'\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            nPoints: data.col,\n            X: data.Xi,\n            interpolatePoint: data.i,\n        })\n        console.log('nPoints', this.state.nPoints)\n        this.createTableInput(parseInt(this.state.nPoints))\n\n        for (var i = 0; i < this.state.nPoints; i++) {\n            document.getElementById('x' + (i + 1)).value = data.x[i]\n            document.getElementById('y' + (i + 1)).value = data.y[i]\n        }\n\n        this.createInterpolatePointInput()\n        for (i = 0; i < this.state.interpolatePoint; i++) {\n            document.getElementById('p' + (i + 1)).value = data.p[i]\n        }\n        this.forceUpdate()\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n    }\n    componentDidUpdate() {}\n\n    initialValue() {\n        x = []\n        y = []\n        for (var i = 1; i <= this.state.nPoints; i++) {\n            x[i] = parseFloat(document.getElementById('x' + i).value)\n            y[i] = parseFloat(document.getElementById('y' + i).value)\n        }\n        for (i = 1; i <= this.state.interpolatePoint; i++) {\n            interpolatePoint[i] = parseInt(\n                document.getElementById('p' + i).value\n            )\n        }\n        console.log('initialValue')\n    }\n\n    L(X, index, n) {\n        var numerate = 1 /*ตัวเศษ*/,\n            denominate = 1 /*ตัวส่วน*/\n        for (var i = 1; i <= n; i++) {\n            if (i !== index) {\n                numerate *= x[i] - X\n                denominate *= x[i] - x[index]\n            }\n        }\n        console.log(numerate / denominate)\n        return parseFloat(numerate / denominate)\n    }\n\n    lagrange(n, X) {\n        fx = 0\n        this.initialValue()\n        //loop set ค่า plot\n        for (var i = 0; i < x.length - 1; i++) {\n            this.plot[i] = { x: x[i + 1], y: y[i + 1] }\n        }\n        for (var i = 1; i <= n; i++) {\n            fx += this.L(X, i, n) * y[i]\n        }\n        this.setState({\n            showOutputCard: true,\n        })\n    }\n\n    bi() {\n        this.setState({ rows: this.plot })\n        console.log(this.state.rows)\n        this.lagrange(\n            parseInt(this.state.interpolatePoint),\n            parseFloat(this.state.X)\n        )\n        dataInTable = []\n        dataInTable.push({\n            Ans: fx,\n        })\n\n        console.log(fx)\n        console.log('end')\n        this.forceUpdate()\n    }\n\n    createInterpolatePointInput() {\n        tempTag = []\n        for (var i = 1; i <= this.state.interpolatePoint; i++) {\n            tempTag.push(\n                <Input\n                    style={{\n                        width: '14%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'p' + i}\n                    key={'p' + i}\n                    placeholder={'p' + i}\n                />\n            )\n        }\n        this.setState({\n            showTableInput2: true,\n        })\n    }\n\n    createTableInput(n) {\n        x = []\n        y = []\n        tableTag = []\n        for (var i = 1; i <= n; i++) {\n            x.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'x' + i}\n                    key={'x' + i}\n                    placeholder={'x' + i}\n                />\n            )\n            y.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'y' + i}\n                    key={'y' + i}\n                    placeholder={'y' + i}\n                />\n            )\n            tableTag.push({\n                no: i,\n                x: x[i - 1],\n                y: y[i - 1],\n            })\n        }\n        this.setState({\n            showTableInput: true,\n        })\n        console.log(x, y, tableTag)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Lagrange</h1>\n                <div className=\"Graphpy\">\n                    {console.log(this.state.rows)}\n                    <Graph data={this.state.rows} />\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Number of points (n)</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        nPoints: e.target.value,\n                                    })\n                                    this.createTableInput(\n                                        parseInt(this.state.nPoints)\n                                    )\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.nPoints}\n                                name=\"nPoints\"\n                                placeholder=\"Number of points (n)\"\n                            />\n                            <p>X</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ X: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.X}\n                                name=\"X\"\n                                placeholder=\"X\"\n                            />\n                            <p>interpolatePoint</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        interpolatePoint: e.target.value,\n                                    })\n                                    this.createInterpolatePointInput()\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.interpolatePoint}\n                                name=\"interpolatePoint\"\n                                placeholder=\"interpolatePoint\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '73%',\n                                    backgroundColor: '#76D7C4',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showTableInput && (\n                            <div>\n                                <Table\n                                    columns={columns1}\n                                    dataSource={tableTag}\n                                    pagination={false}\n                                    bordered={true}\n                                    bodyStyle={{\n                                        fontWeight: 'bold',\n                                        fontSize: '18px',\n                                        color: 'white',\n                                        overflowY: 'scroll',\n                                        minWidth: 120,\n                                        maxHeight: 300,\n                                    }}\n                                ></Table>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {this.state.showTableInput2 && (\n                    <div>\n                        <h2>\n                            interpolatePoint{' '}\n                            {parseInt(this.state.interpolatePoint) === 2\n                                ? '(Linear)'\n                                : parseInt(this.state.interpolatePoint) === 3\n                                ? '(Quadratic)'\n                                : '(Polynomial)'}\n                        </h2>\n                        {tempTag}\n                    </div>\n                )}\n\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns2}\n                        dataSource={dataInTable}\n                        pagination1={false}\n                        bordered={true}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Interpolation\\Spline.js",["166","167","168","169"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nvar columns2 = [\n    {\n        title: 'Ans',\n        dataIndex: 'Ans',\n        key: 'Ans',\n    },\n]\n\nvar columns1 = [\n    {\n        title: 'No.',\n        dataIndex: 'no',\n        key: 'no',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n    {\n        title: 'Y',\n        dataIndex: 'y',\n        key: 'y',\n    },\n]\nvar x = [],\n    y = [],\n    tableTag = [],\n    answer\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.state = {\n            nPoints: null,\n            ans: [],\n            showTableInput: false,\n            showTableInpu2: false,\n        }\n        this.elt = {}\n        this.calculator = {}\n    }\n    //API\n    async Ex() {\n        const url = 'http://localhost:8000/data/sp'\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            nPoints: data.col,\n            X: data.X,\n        })\n        console.log('nPoints', this.state.nPoints)\n        this.createTableInput(parseInt(this.state.nPoints))\n\n        for (var i = 0; i < this.state.nPoints; i++) {\n            document.getElementById('x' + (i + 1)).value = data.X[i]\n            document.getElementById('y' + (i + 1)).value = data.Y[i]\n        }\n\n        this.forceUpdate()\n    }\n\n    spline(x, xs, ys) {\n        var ks = xs.map(function () {\n            return 0\n        })\n        ks = this.getNaturalKs(xs, ys, ks)\n        var i = 1\n        while (xs[i] < x) i++\n        var t = (x - xs[i - 1]) / (xs[i] - xs[i - 1])\n        var a = ks[i - 1] * (xs[i] - xs[i - 1]) - (ys[i] - ys[i - 1])\n        var b = -ks[i] * (xs[i] - xs[i - 1]) + (ys[i] - ys[i - 1])\n        var q =\n            (1 - t) * ys[i - 1] +\n            t * ys[i] +\n            t * (1 - t) * (a * (1 - t) + b * t)\n        console.log(q)\n        this.setState({\n            showOutputCard: true,\n        })\n\n        return q\n    }\n\n    getNaturalKs(xs, ys, ks) {\n        var n = xs.length - 1\n        var A = this.zerosMat(n + 1, n + 2)\n\n        for (\n            var i = 1;\n            i < n;\n            i++ // rows\n        ) {\n            A[i][i - 1] = 1 / (xs[i] - xs[i - 1])\n            A[i][i] = 2 * (1 / (xs[i] - xs[i - 1]) + 1 / (xs[i + 1] - xs[i]))\n            A[i][i + 1] = 1 / (xs[i + 1] - xs[i])\n            A[i][n + 1] =\n                3 *\n                ((ys[i] - ys[i - 1]) /\n                    ((xs[i] - xs[i - 1]) * (xs[i] - xs[i - 1])) +\n                    (ys[i + 1] - ys[i]) /\n                        ((xs[i + 1] - xs[i]) * (xs[i + 1] - xs[i])))\n        }\n\n        A[0][0] = 2 / (xs[1] - xs[0])\n        A[0][1] = 1 / (xs[1] - xs[0])\n        A[0][n + 1] =\n            (3 * (ys[1] - ys[0])) / ((xs[1] - xs[0]) * (xs[1] - xs[0]))\n\n        A[n][n - 1] = 1 / (xs[n] - xs[n - 1])\n        A[n][n] = 2 / (xs[n] - xs[n - 1])\n        A[n][n + 1] =\n            (3 * (ys[n] - ys[n - 1])) /\n            ((xs[n] - xs[n - 1]) * (xs[n] - xs[n - 1]))\n\n        return this.solve(A, ks)\n    }\n\n    solve(A, ks) {\n        var m = A.length\n        for (\n            var k = 0;\n            k < m;\n            k++ // column\n        ) {\n            // pivot for column\n            var i_max = 0\n            var vali = Number.NEGATIVE_INFINITY\n            for (var i = k; i < m; i++)\n                if (A[i][k] > vali) {\n                    i_max = i\n                    vali = A[i][k]\n                }\n            this.swapRows(A, k, i_max)\n\n            // for all rows below pivot\n            for (i = k + 1; i < m; i++) {\n                for (var j = k + 1; j < m + 1; j++)\n                    A[i][j] = A[i][j] - A[k][j] * (A[i][k] / A[k][k])\n                A[i][k] = 0\n            }\n        }\n        for (\n            i = m - 1;\n            i >= 0;\n            i-- // rows = columns\n        ) {\n            var v = A[i][m] / A[i][i]\n            ks[i] = v\n            for (\n                j = i - 1;\n                j >= 0;\n                j-- // rows\n            ) {\n                A[j][m] -= A[j][i] * v\n                A[j][i] = 0\n            }\n        }\n        console.log(A)\n        return ks\n    }\n\n    zerosMat(r, c) {\n        var A = []\n        for (var i = 0; i < r; i++) {\n            A.push([])\n            for (var j = 0; j < c; j++) A[i].push(0)\n        }\n        return A\n    }\n\n    swapRows(m, k, l) {\n        var p = m[k]\n        m[k] = m[l]\n        m[l] = p\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n    }\n    componentDidUpdate() {}\n\n    initialValue(X) {\n        x = []\n        y = []\n        for (var i = 0; i < this.state.nPoints; i++) {\n            x[i] = parseFloat(document.getElementById('x' + (i + 1)).value)\n            y[i] = parseFloat(document.getElementById('y' + (i + 1)).value)\n        }\n        console.log('X', this.state.X)\n        console.log('x', x)\n        console.log('y', y)\n        answer = this.spline(X, x, y)\n        console.log('initialValue')\n    }\n\n    bi() {\n        dataInTable = []\n        this.initialValue(parseFloat(this.state.X))\n        console.log('answer', answer)\n        dataInTable.push({\n            Ans: answer,\n        })\n\n        console.log('end')\n    }\n\n    createTableInput(n) {\n        x = []\n        y = []\n        tableTag = []\n        for (var i = 1; i <= n; i++) {\n            x.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'x' + i}\n                    key={'x' + i}\n                    placeholder={'x' + i}\n                />\n            )\n            y.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'y' + i}\n                    key={'y' + i}\n                    placeholder={'y' + i}\n                />\n            )\n            tableTag.push({\n                no: i,\n                x: x[i - 1],\n                y: y[i - 1],\n            })\n        }\n\n        this.setState({\n            showTableInput: true,\n        })\n        console.log(x, y, tableTag)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Spline Interpolation</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Number of points (n)</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        nPoints: e.target.value,\n                                    })\n                                    this.createTableInput(\n                                        parseInt(this.state.nPoints)\n                                    )\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.nPoints}\n                                name=\"nPoints\"\n                                placeholder=\"Number of points (n)\"\n                            />\n                            <p>X</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ X: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.X}\n                                name=\"X\"\n                                placeholder=\"X\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '73%',\n                                    backgroundColor: '#76D7C4',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showTableInput && (\n                            <div>\n                                <Table\n                                    columns={columns1}\n                                    dataSource={tableTag}\n                                    pagination={false}\n                                    bordered={true}\n                                    bodyStyle={{\n                                        fontWeight: 'bold',\n                                        fontSize: '18px',\n                                        color: 'white',\n                                        overflowY: 'scroll',\n                                        minWidth: 120,\n                                        maxHeight: 300,\n                                    }}\n                                ></Table>\n                            </div>\n                        )}\n                    </div>\n                </div>\n\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns2}\n                        dataSource={dataInTable}\n                        pagination1={false}\n                        bordered={true}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Regression\\Linear.js",["170","171","172","173"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nimport regression from 'regression'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nvar columns2 = [\n    {\n        title: 'Ans',\n        dataIndex: 'Ans',\n        key: 'Ans',\n    },\n]\n\nvar columns1 = [\n    {\n        title: 'No.',\n        dataIndex: 'no',\n        key: 'no',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n    {\n        title: 'Y',\n        dataIndex: 'y',\n        key: 'y',\n    },\n]\n\nvar x = [],\n    y = [],\n    tableTag = [],\n    answer\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.state = {\n            nPoints: null,\n            ans: [],\n            showTableInput: false,\n            showTableInpu2: false,\n        }\n        this.elt = {}\n        this.calculator = {}\n    }\n    //API\n    async Ex() {\n        // const url = \"https://api.randomuser.me/\";\n        const url = 'http://localhost:8000/data/lr'\n        // const url = \"http://localhost:8000/Newton\";\n        // const url = \"http://127.0.0.1/Json/item.json\";\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            nPoints: data.col,\n            X: data.Xi,\n        })\n        console.log('nPoints', this.state.nPoints)\n        this.createTableInput(parseInt(this.state.nPoints))\n\n        for (var i = 0; i < this.state.nPoints; i++) {\n            document.getElementById('x' + (i + 1)).value = data.X[i]\n            document.getElementById('y' + (i + 1)).value = data.Y[i]\n        }\n\n        this.forceUpdate()\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n    }\n    componentDidUpdate() {}\n\n    initialValue() {\n        x = []\n        y = []\n        for (var i = 0; i < this.state.nPoints; i++) {\n            x[i] = parseFloat(document.getElementById('x' + (i + 1)).value)\n            y[i] = parseFloat(document.getElementById('y' + (i + 1)).value)\n        }\n        console.log('X', this.state.X)\n        console.log('x', x)\n        console.log('y', y)\n        console.log('initialValue')\n    }\n\n    cal(nPoints) {\n        console.log('x', x)\n        console.log('y', y)\n        console.log('nPoints', nPoints)\n        if (x.length !== 0 && y.length !== 0) {\n            var arr = []\n            var xi = this.state.X\n            for (let i = 0; i < nPoints; i++) {\n                arr.push([x[i], y[i]])\n            }\n            console.log(arr)\n            console.log(\n                regression\n                    .linear(arr, {\n                        precision: 6,\n                    })\n                    .predict(xi)[1]\n            )\n        }\n        answer = regression\n            .linear(arr, {\n                precision: 6,\n            })\n            .predict(xi)[1]\n    }\n\n    bi() {\n        dataInTable = []\n        this.initialValue()\n        this.cal(this.state.nPoints)\n        console.log('answer', answer)\n        dataInTable.push({\n            Ans: answer,\n        })\n        this.forceUpdate()\n        console.log('end')\n    }\n\n    createTableInput(n) {\n        x = []\n        y = []\n        tableTag = []\n        for (var i = 1; i <= n; i++) {\n            x.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'x' + i}\n                    key={'x' + i}\n                    placeholder={'x' + i}\n                />\n            )\n            y.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'y' + i}\n                    key={'y' + i}\n                    placeholder={'y' + i}\n                />\n            )\n            tableTag.push({\n                no: i,\n                x: x[i - 1],\n                y: y[i - 1],\n            })\n        }\n\n        this.setState({\n            showTableInput: true,\n        })\n        console.log(x, y, tableTag)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Linear Regression</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Number of points (n)</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        nPoints: e.target.value,\n                                    })\n                                    this.createTableInput(\n                                        parseInt(this.state.nPoints)\n                                    )\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.nPoints}\n                                name=\"nPoints\"\n                                placeholder=\"Number of points (n)\"\n                            />\n                            <p>X</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ X: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.X}\n                                name=\"X\"\n                                placeholder=\"X\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '73%',\n                                    backgroundColor: '#d580ff',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showTableInput && (\n                            <div>\n                                <Table\n                                    columns={columns1}\n                                    dataSource={tableTag}\n                                    pagination={false}\n                                    bordered={true}\n                                    bodyStyle={{\n                                        fontWeight: 'bold',\n                                        fontSize: '18px',\n                                        color: 'white',\n                                        overflowY: 'scroll',\n                                        minWidth: 120,\n                                        maxHeight: 300,\n                                    }}\n                                ></Table>\n                            </div>\n                        )}\n                    </div>\n                </div>\n\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns2}\n                        dataSource={dataInTable}\n                        pagination1={false}\n                        bordered={true}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Regression\\MultipleLinear.js",["174","175","176","177","178","179"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nconst { regression } = require('multiregress')\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nvar columns2 = [\n    {\n        title: 'Ans',\n        dataIndex: 'Ans',\n        key: 'Ans',\n    },\n]\n\nvar columns1 = [\n    {\n        title: 'No.',\n        dataIndex: 'no',\n        key: 'no',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n    {\n        title: 'Y',\n        dataIndex: 'y',\n        key: 'y',\n    },\n]\nvar x = [],\n    y = [],\n    tableTag = [],\n    answer,\n    matrixX = []\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.state = {\n            nPoints: null,\n            X: null,\n            ans: [],\n            showTableInput: false,\n            showTableInpu2: false,\n        }\n        this.elt = {}\n        this.calculator = {}\n    }\n    //API\n    async Ex() {\n        // const url = \"https://api.randomuser.me/\";\n        const url = 'http://localhost:8000/data/mlr'\n        // const url = \"http://localhost:8000/Newton\";\n        // const url = \"http://127.0.0.1/Json/item.json\";\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log('data', data)\n        this.setState({\n            nPoints: data.col,\n            X: data.row,\n        })\n        console.log('nPoints', this.state.nPoints)\n        this.createTableInput(parseInt(this.state.nPoints))\n\n        for (var i = 0; i < this.state.nPoints; i++) {\n            for (var j = 0; j < this.state.X; j++) {\n                document.getElementById('x' + (i + 1) + '' + (j + 1)).value =\n                    data.X[i][j]\n            }\n            document.getElementById('y' + (i + 1)).value =\n                data.Y[i]\n        }\n\n        for (var i = 0; i < this.state.X; i++) {\n            console.log(data.Xi[i])\n            document.getElementById('xi' + (i + 1)).value =\n                data.Xi[i]\n        }\n\n        this.forceUpdate()\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n    }\n    componentDidUpdate() {}\n\n    initialValue() {\n        var X = this.state.X\n        var n = this.state.nPoints\n        x = []\n        y = []\n        for (var i = 0; i < n; i++) {\n            x[i] = []\n            for (var j = 0; j < X; j++) {\n                x[i][j] = parseInt(\n                    document.getElementById('x' + (i + 1) + '' + (j + 1)).value\n                )\n            }\n        }\n        for (i = 0; i < n; i++) {\n            y[i] = parseFloat(document.getElementById('y' + (i + 1)).value)\n        }\n        console.log('x', x)\n        console.log('y', y)\n    }\n\n    cal(nPoints) {\n        console.log('x', x)\n        console.log('y', y)\n        console.log('nPoints', nPoints)\n        if (x.length !== 0 && y.length !== 0) {\n            var arr = []\n            var xi = []\n            for (let i = 1; i <= this.state.X; i++) {\n                console.log(\n                    i,\n                    parseFloat(document.getElementById('xi' + i).value)\n                )\n                xi[i - 1] = parseFloat(document.getElementById('xi' + i).value)\n            }\n            console.log('xi', xi)\n            for (let i = 0; i < this.state.nPoints; i++) {\n                var temp = []\n                for (let j = 0; j < this.state.X; j++) {\n                    temp.push(x[i][j])\n                }\n                temp.push(y[i])\n                arr.push(temp)\n            }\n\n            console.log(arr)\n            console.log(regression(arr))\n            arr = regression(arr)\n            let sum = arr[0]\n            for (let i = 1; i < arr.length; i++) {\n                sum += xi[i - 1] * arr[i]\n            }\n            console.log(sum)\n            answer = sum\n        }\n    }\n\n    bi() {\n        dataInTable = []\n        this.initialValue()\n        this.cal(this.state.nPoints)\n        console.log('answer', answer)\n        dataInTable.push({\n            Ans: answer,\n        })\n        this.forceUpdate()\n        console.log('end')\n    }\n\n    createTableInput() {\n        x = []\n        y = []\n        tableTag = []\n        matrixX = []\n        var n = this.state.nPoints\n        var X = this.state.X\n        console.log('n', n)\n        console.log('X', X)\n        // if (this.state.nPoints != null && this.state.X != null) {\n        for (var i = 1; i <= n; i++) {\n            x[i] = []\n            for (var j = 1; j <= X; j++) {\n                x[i].push(\n                    <Input\n                        style={{\n                            width: '70%',\n                            height: '50%',\n                            backgroundColor: 'black',\n                            marginInlineEnd: '5%',\n                            marginBlockEnd: '5%',\n                            color: 'white',\n                            fontSize: '18px',\n                            fontWeight: 'bold',\n                            justifyContent: 'center',\n                        }}\n                        id={'x' + i + '' + j}\n                        key={'x' + i + '' + j}\n                        placeholder={'x' + i + '' + j}\n                    />\n                )\n            }\n            y.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'y' + i}\n                    key={'y' + i}\n                    placeholder={'y' + i}\n                />\n            )\n            tableTag.push({\n                no: i,\n                x: x[i],\n                y: y[i - 1],\n            })\n        }\n        for (var j = 1; j <= X; j++) {\n            matrixX.push(\n                <Input\n                    style={{\n                        width: '18%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'xi' + j}\n                    key={'xi' + j}\n                    placeholder={'xi' + j}\n                />\n            )\n        }\n        this.setState({\n            showTableInput: true,\n        })\n        console.log(x, y, tableTag)\n        // }\n        console.log('x', x)\n        console.log('y', y)\n        this.forceUpdate()\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Multiple Linear Regression</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Number of points (n)</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        nPoints: e.target.value,\n                                    })\n                                    this.createTableInput()\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.nPoints}\n                                name=\"nPoints\"\n                                placeholder=\"Number of points (n)\"\n                            />\n                            <p>Number of X</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({ X: e.target.value })\n                                    this.createTableInput()\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.X}\n                                name=\"X\"\n                                placeholder=\"Number of X\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '73%',\n                                    backgroundColor: '#76D7C4',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showTableInput && (\n                            <div>\n                                <Table\n                                    columns={columns1}\n                                    dataSource={tableTag}\n                                    pagination={false}\n                                    bordered={true}\n                                    bodyStyle={{\n                                        fontWeight: 'bold',\n                                        fontSize: '18px',\n                                        color: 'white',\n                                        overflowY: 'scroll',\n                                        minWidth: 120,\n                                        maxHeight: 300,\n                                    }}\n                                ></Table>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {this.state.showTableInput && (\n                    <div>\n                        <h2>Input Matrix X</h2>\n                        {matrixX}\n                    </div>\n                )}\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns2}\n                        dataSource={dataInTable}\n                        pagination1={false}\n                        bordered={true}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\Regression\\Polynomial.js",["180","181","182","183"],"import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Card, Input, Button, Table } from 'antd'\nimport Desmos from 'desmos'\nimport { addStyles, EditableMathField } from 'react-mathquill'\nimport regression from 'regression'\nconst AlgebraLatex = require('algebra-latex')\nconst math = require('mathjs')\n\naddStyles()\n\nvar dataInTable = []\nvar columns2 = [\n    {\n        title: 'Ans',\n        dataIndex: 'Ans',\n        key: 'Ans',\n    },\n]\n\nvar columns1 = [\n    {\n        title: 'No.',\n        dataIndex: 'no',\n        key: 'no',\n    },\n    {\n        title: 'X',\n        dataIndex: 'x',\n        key: 'x',\n    },\n    {\n        title: 'Y',\n        dataIndex: 'y',\n        key: 'y',\n    },\n]\nvar x = [],\n    y = [],\n    tableTag = [],\n    answer\n\nexport default class Test extends Component {\n    constructor(props) {\n        super(props)\n        this.bi = this.bi.bind(this)\n        this.Ex = this.Ex.bind(this)\n        this.state = {\n            nPoints: null,\n            ans: [],\n            showTableInput: false,\n            showTableInpu2: false,\n        }\n        this.elt = {}\n        this.calculator = {}\n    }\n    //API\n    async Ex() {\n        const url = 'http://localhost:8000/data/pr'\n        const response = await fetch(url)\n        console.log(response)\n        const data = await response.json()\n        console.log(data)\n        this.setState({\n            nPoints: data.col,\n            X: data.Xi,\n        })\n        console.log('nPoints', this.state.nPoints)\n        this.createTableInput(parseInt(this.state.nPoints))\n\n        for (var i = 0; i < this.state.nPoints; i++) {\n            document.getElementById('x' + (i + 1)).value = data.X[i]\n            document.getElementById('y' + (i + 1)).value = data.Y[i]\n        }\n\n        this.forceUpdate()\n    }\n\n    componentDidMount() {\n        //ทำอัตโนมัติหลังจาก render เสร็จ\n    }\n    componentDidUpdate() {}\n\n    initialValue() {\n        x = []\n        y = []\n        for (var i = 0; i < this.state.nPoints; i++) {\n            x[i] = parseFloat(document.getElementById('x' + (i + 1)).value)\n            y[i] = parseFloat(document.getElementById('y' + (i + 1)).value)\n        }\n        console.log('X', this.state.X)\n        console.log('x', x)\n        console.log('y', y)\n        console.log('initialValue')\n    }\n\n    cal(nPoints) {\n        console.log('x', x)\n        console.log('y', y)\n        console.log('nPoints', nPoints)\n        if (x.length !== 0 && y.length !== 0) {\n            var arr = []\n            var xi = this.state.X\n            for (let i = 0; i < nPoints; i++) {\n                arr.push([x[i], y[i]])\n            }\n            console.log(arr)\n            console.log(\n                regression\n                    .polynomial(arr, {\n                        precision: 6,\n                    })\n                    .predict(xi)[1]\n            )\n        }\n        answer = regression\n            .linear(arr, {\n                precision: 6,\n            })\n            .predict(xi)[1]\n    }\n\n    bi() {\n        dataInTable = []\n        this.initialValue()\n        this.cal(this.state.nPoints)\n        console.log('answer', answer)\n        dataInTable.push({\n            Ans: answer,\n        })\n        this.forceUpdate()\n        console.log('end')\n    }\n\n    createTableInput(n) {\n        x = []\n        y = []\n        tableTag = []\n        for (var i = 1; i <= n; i++) {\n            x.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'x' + i}\n                    key={'x' + i}\n                    placeholder={'x' + i}\n                />\n            )\n            y.push(\n                <Input\n                    style={{\n                        width: '100%',\n                        height: '50%',\n                        backgroundColor: 'black',\n                        marginInlineEnd: '5%',\n                        marginBlockEnd: '5%',\n                        color: 'white',\n                        fontSize: '18px',\n                        fontWeight: 'bold',\n                    }}\n                    id={'y' + i}\n                    key={'y' + i}\n                    placeholder={'y' + i}\n                />\n            )\n            tableTag.push({\n                no: i,\n                x: x[i - 1],\n                y: y[i - 1],\n            })\n        }\n\n        this.setState({\n            showTableInput: true,\n        })\n        console.log(x, y, tableTag)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Polynomial Regression</h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div>\n                            <p>Number of points (n)</p>\n                            <Input\n                                onChange={async (e) => {\n                                    await this.setState({\n                                        nPoints: e.target.value,\n                                    })\n                                    this.createTableInput(\n                                        parseInt(this.state.nPoints)\n                                    )\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.nPoints}\n                                name=\"nPoints\"\n                                placeholder=\"Number of points (n)\"\n                            />\n                            <p>X</p>\n                            <Input\n                                onChange={(e) => {\n                                    this.setState({ X: e.target.value })\n                                    this.forceUpdate()\n                                }}\n                                value={this.state.X}\n                                name=\"X\"\n                                placeholder=\"X\"\n                            />\n                            <br></br>\n                            <br></br>\n                            <Button onClick={this.bi} type=\"primary\">\n                                Submit\n                            </Button>\n                            <Button\n                                style={{\n                                    marginLeft: '73%',\n                                    backgroundColor: '#76D7C4',\n                                    borderColor: '#76D7C4',\n                                }}\n                                onClick={this.Ex}\n                                type=\"primary\"\n                            >\n                                Example\n                            </Button>\n                        </div>\n                        <br></br>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showTableInput && (\n                            <div>\n                                <Table\n                                    columns={columns1}\n                                    dataSource={tableTag}\n                                    pagination={false}\n                                    bordered={true}\n                                    bodyStyle={{\n                                        fontWeight: 'bold',\n                                        fontSize: '18px',\n                                        color: 'white',\n                                        overflowY: 'scroll',\n                                        minWidth: 120,\n                                        maxHeight: 300,\n                                    }}\n                                ></Table>\n                            </div>\n                        )}\n                    </div>\n                </div>\n\n                <Card\n                    title={'Output'}\n                    bordered={true}\n                    style={{\n                        width: '100%',\n                        background: '#2196f3',\n                        color: '#FFFFFFFF',\n                    }}\n                    id=\"outputCard\"\n                >\n                    <Table\n                        pagination={{ defaultPageSize: 5 }}\n                        columns={columns2}\n                        dataSource={dataInTable}\n                        pagination1={false}\n                        bordered={true}\n                        bodyStyle={{\n                            fontWeight: 'bold',\n                            fontSize: '18px',\n                            color: 'black',\n                        }}\n                    ></Table>\n                </Card>\n            </div>\n        )\n    }\n}\n","C:\\Users\\karwi\\OneDrive\\เดสก์ท็อป\\numer\\Numer-main\\src\\components\\Graph.js",[],{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"188","severity":1,"message":"189","line":161,"column":44,"nodeType":"186","messageId":"190","endLine":161,"endColumn":47},{"ruleId":"188","severity":1,"message":"189","line":169,"column":37,"nodeType":"186","messageId":"190","endLine":169,"endColumn":40},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"191","line":6,"column":10,"nodeType":"186","messageId":"187","endLine":6,"endColumn":17},{"ruleId":"184","severity":1,"message":"192","line":6,"column":19,"nodeType":"186","messageId":"187","endLine":6,"endColumn":29},{"ruleId":"184","severity":1,"message":"193","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":19},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"194","line":6,"column":10,"nodeType":"186","messageId":"187","endLine":6,"endColumn":13},{"ruleId":"184","severity":1,"message":"195","line":6,"column":15,"nodeType":"186","messageId":"187","endLine":6,"endColumn":21},{"ruleId":"184","severity":1,"message":"191","line":7,"column":10,"nodeType":"186","messageId":"187","endLine":7,"endColumn":17},{"ruleId":"184","severity":1,"message":"192","line":7,"column":19,"nodeType":"186","messageId":"187","endLine":7,"endColumn":29},{"ruleId":"184","severity":1,"message":"193","line":8,"column":7,"nodeType":"186","messageId":"187","endLine":8,"endColumn":19},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"193","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":19},{"ruleId":"184","severity":1,"message":"185","line":4,"column":21,"nodeType":"186","messageId":"187","endLine":4,"endColumn":38},{"ruleId":"184","severity":1,"message":"196","line":5,"column":19,"nodeType":"186","messageId":"187","endLine":5,"endColumn":25},{"ruleId":"184","severity":1,"message":"193","line":6,"column":7,"nodeType":"186","messageId":"187","endLine":6,"endColumn":19},{"ruleId":"184","severity":1,"message":"197","line":27,"column":5,"nodeType":"186","messageId":"187","endLine":27,"endColumn":11},{"ruleId":"184","severity":1,"message":"198","line":81,"column":13,"nodeType":"186","messageId":"187","endLine":81,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"188","severity":1,"message":"189","line":159,"column":44,"nodeType":"186","messageId":"190","endLine":159,"endColumn":47},{"ruleId":"188","severity":1,"message":"189","line":167,"column":37,"nodeType":"186","messageId":"190","endLine":167,"endColumn":40},{"ruleId":"184","severity":1,"message":"199","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"193","line":6,"column":7,"nodeType":"186","messageId":"187","endLine":6,"endColumn":19},{"ruleId":"184","severity":1,"message":"200","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":11},{"ruleId":"184","severity":1,"message":"197","line":27,"column":5,"nodeType":"186","messageId":"187","endLine":27,"endColumn":11},{"ruleId":"184","severity":1,"message":"185","line":4,"column":21,"nodeType":"186","messageId":"187","endLine":4,"endColumn":38},{"ruleId":"184","severity":1,"message":"193","line":5,"column":7,"nodeType":"186","messageId":"187","endLine":5,"endColumn":19},{"ruleId":"184","severity":1,"message":"197","line":26,"column":5,"nodeType":"186","messageId":"187","endLine":26,"endColumn":11},{"ruleId":"184","severity":1,"message":"199","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"193","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":19},{"ruleId":"184","severity":1,"message":"200","line":8,"column":7,"nodeType":"186","messageId":"187","endLine":8,"endColumn":11},{"ruleId":"184","severity":1,"message":"201","line":164,"column":9,"nodeType":"186","messageId":"187","endLine":164,"endColumn":15},{"ruleId":"184","severity":1,"message":"199","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"193","line":6,"column":7,"nodeType":"186","messageId":"187","endLine":6,"endColumn":19},{"ruleId":"184","severity":1,"message":"200","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":11},{"ruleId":"202","severity":1,"message":"203","line":81,"column":18,"nodeType":"186","messageId":"204","endLine":81,"endColumn":19},{"ruleId":"184","severity":1,"message":"185","line":4,"column":21,"nodeType":"186","messageId":"187","endLine":4,"endColumn":38},{"ruleId":"184","severity":1,"message":"197","line":25,"column":5,"nodeType":"186","messageId":"187","endLine":25,"endColumn":11},{"ruleId":"184","severity":1,"message":"199","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"205","line":6,"column":10,"nodeType":"186","messageId":"187","endLine":6,"endColumn":17},{"ruleId":"184","severity":1,"message":"196","line":6,"column":19,"nodeType":"186","messageId":"187","endLine":6,"endColumn":25},{"ruleId":"184","severity":1,"message":"193","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":19},{"ruleId":"184","severity":1,"message":"200","line":8,"column":7,"nodeType":"186","messageId":"187","endLine":8,"endColumn":11},{"ruleId":"184","severity":1,"message":"197","line":16,"column":5,"nodeType":"186","messageId":"187","endLine":16,"endColumn":11},{"ruleId":"184","severity":1,"message":"199","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"205","line":6,"column":10,"nodeType":"186","messageId":"187","endLine":6,"endColumn":17},{"ruleId":"184","severity":1,"message":"196","line":6,"column":19,"nodeType":"186","messageId":"187","endLine":6,"endColumn":25},{"ruleId":"184","severity":1,"message":"193","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":19},{"ruleId":"184","severity":1,"message":"200","line":8,"column":7,"nodeType":"186","messageId":"187","endLine":8,"endColumn":11},{"ruleId":"184","severity":1,"message":"197","line":16,"column":5,"nodeType":"186","messageId":"187","endLine":16,"endColumn":11},{"ruleId":"202","severity":1,"message":"203","line":128,"column":18,"nodeType":"186","messageId":"204","endLine":128,"endColumn":19},{"ruleId":"184","severity":1,"message":"199","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"193","line":6,"column":7,"nodeType":"186","messageId":"187","endLine":6,"endColumn":19},{"ruleId":"184","severity":1,"message":"200","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":11},{"ruleId":"184","severity":1,"message":"199","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"193","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":19},{"ruleId":"184","severity":1,"message":"200","line":8,"column":7,"nodeType":"186","messageId":"187","endLine":8,"endColumn":11},{"ruleId":"184","severity":1,"message":"199","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"193","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":19},{"ruleId":"184","severity":1,"message":"200","line":8,"column":7,"nodeType":"186","messageId":"187","endLine":8,"endColumn":11},{"ruleId":"202","severity":1,"message":"203","line":85,"column":18,"nodeType":"186","messageId":"204","endLine":85,"endColumn":19},{"ruleId":"202","severity":1,"message":"206","line":222,"column":18,"nodeType":"186","messageId":"204","endLine":222,"endColumn":19},{"ruleId":"184","severity":1,"message":"199","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":5,"column":21,"nodeType":"186","messageId":"187","endLine":5,"endColumn":38},{"ruleId":"184","severity":1,"message":"193","line":7,"column":7,"nodeType":"186","messageId":"187","endLine":7,"endColumn":19},{"ruleId":"184","severity":1,"message":"200","line":8,"column":7,"nodeType":"186","messageId":"187","endLine":8,"endColumn":11},"no-unused-vars","'EditableMathField' is defined but never used.","Identifier","unusedVar","no-use-before-define","'err' was used before it was defined.","usedBeforeDefined","'compile' is defined but never used.","'derivative' is defined but never used.","'AlgebraLatex' is assigned a value but never used.","'log' is defined but never used.","'string' is defined but never used.","'format' is defined but never used.","'answer' is assigned a value but never used.","'n' is assigned a value but never used.","'Desmos' is defined but never used.","'math' is assigned a value but never used.","'output' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'lusolve' is defined but never used.","'j' is already defined."]